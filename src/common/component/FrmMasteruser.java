/*
 * From Template
 *
 * Created on June 29, 2007, 2:00 PM
 * 
 * 
 * How to Call this Form on FrmMainFrame
 * Sample : 
 *    
 * import common.component.FrmMastergroup;
 * 
 * .......
 * 
 try {
        if (frmmasteruser == null) {
            frmmasteruser = new FrmMasteruser(this);
        }
        
        showForm(frmmasteruser);
        
    }catch(Exception e) {
        e.printStackTrace();
    }
 * 
 */


package common.component;

import common.component.FrmBrowse;
import common.classinterface.NavigatorFormInt;
import common.component.FrmMainFrame;

import common.tablemodels.GlobalModel;
import common.utils.CodeException;
import common.utils.GlobalUtils;
import java.util.Enumeration;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import common.objectclasses.Mastergroup;
import common.objectclasses.Mastergroups;
import common.objectclasses.Masteruser;
import common.objectclasses.Masteruserdetail;
import common.objectclasses.Masterusers;
import common.tablemodels.CheckBoxRenderer;
import common.tablemodels.MasterUserModel;
import common.print.FrmPrintMasterUser;
import common.utils.ExtFileChooserFilter;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;


/**
 *
 * @author  Generator
 */

public class FrmMasteruser extends javax.swing.JInternalFrame implements NavigatorFormInt {

    private static int istatus = 0;
    private static int iformtype = 0;
    public static String CLASSNAME="FrmMasteruser";
    
    FrmMainFrame mf ;
    
    
    public Masteruser obj = new Masteruser();
    
    Object[] data = new Object[Masteruserdetail.columns.length];

    DefaultTableModel tmodel = new MasterUserModel();
   
   
    /** Creates new form Area */
    public FrmMasteruser() throws CodeException {
        initComponents();
    }
    
    public FrmMasteruser(FrmMainFrame mf) throws CodeException{
        this.mf = mf;
        initComponents();
  
        GlobalModel.setColHeader(tmodel, Masteruserdetail.columns);
        GlobalModel.showTable(jtbluser, tmodel);
        GlobalModel.setCol(jtbluser, Masteruserdetail.columns);
        
        GlobalModel.clearRow(tmodel);

        
        TableColumn column3 = jtbluser.getColumnModel().getColumn(3);
        column3.setCellRenderer(new CheckBoxRenderer());
        column3.setCellEditor(new DefaultCellEditor(new JCheckBox()));
  
    }
     
       
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jHeader = new javax.swing.JLabel();
        HorizontalLine = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jtxtid = new javax.swing.JTextField();
        jlblUser = new javax.swing.JLabel();
        jtxtUser = new javax.swing.JTextField();
        jlblPassword = new javax.swing.JLabel();
        jlblNama = new javax.swing.JLabel();
        jtxtNama = new javax.swing.JTextField();
        jtxtTanggalEntry = new javax.swing.JTextField();
        jtxtTanggalUpdate = new javax.swing.JTextField();
        jtxtUserId = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbluser = new javax.swing.JTable();
        jtxtPassword = new javax.swing.JPasswordField();
        jbtnBrowse = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Masteruser");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jHeader.setBackground(new java.awt.Color(102, 102, 102));
        jHeader.setFont(new java.awt.Font("Dialog", 1, 10));
        jHeader.setForeground(new java.awt.Color(255, 255, 255));
        jHeader.setText(" : : Masteruser");
        jHeader.setAlignmentY(0.0F);
        jHeader.setOpaque(true);
        getContentPane().add(jHeader);
        jHeader.setBounds(30, 30, 130, 20);

        HorizontalLine.setForeground(new java.awt.Color(102, 102, 102));
        HorizontalLine.setAlignmentX(0.0F);
        HorizontalLine.setAlignmentY(0.0F);
        getContentPane().add(HorizontalLine);
        HorizontalLine.setBounds(160, 50, 650, 2);

        jSeparator3.setForeground(new java.awt.Color(102, 102, 102));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setAlignmentX(0.0F);
        jSeparator3.setAlignmentY(0.0F);
        getContentPane().add(jSeparator3);
        jSeparator3.setBounds(30, 50, 2, 400);

        jtxtid.setEditable(false);
        jtxtid.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtid.setText("id");
        getContentPane().add(jtxtid);
        jtxtid.setBounds(170, 30, 80, 16);

        jlblUser.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlblUser.setText("User");
        getContentPane().add(jlblUser);
        jlblUser.setBounds(60, 80, 140, 14);

        jtxtUser.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxtUser.setText("User");
        jtxtUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtxtUserKeyTyped(evt);
            }
        });
        getContentPane().add(jtxtUser);
        jtxtUser.setBounds(250, 80, 80, 20);

        jlblPassword.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlblPassword.setText("Password");
        getContentPane().add(jlblPassword);
        jlblPassword.setBounds(60, 100, 140, 14);

        jlblNama.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlblNama.setText("Nama");
        getContentPane().add(jlblNama);
        jlblNama.setBounds(60, 120, 140, 14);

        jtxtNama.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxtNama.setText("Nama");
        getContentPane().add(jtxtNama);
        jtxtNama.setBounds(250, 120, 410, 20);

        jtxtTanggalEntry.setEditable(false);
        jtxtTanggalEntry.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtTanggalEntry.setText("TanggalEntry");
        getContentPane().add(jtxtTanggalEntry);
        jtxtTanggalEntry.setBounds(610, 30, 90, 16);

        jtxtTanggalUpdate.setEditable(false);
        jtxtTanggalUpdate.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtTanggalUpdate.setText("TanggalUpdate");
        getContentPane().add(jtxtTanggalUpdate);
        jtxtTanggalUpdate.setBounds(710, 30, 57, 16);

        jtxtUserId.setEditable(false);
        jtxtUserId.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtUserId.setText("UserId");
        getContentPane().add(jtxtUserId);
        jtxtUserId.setBounds(500, 30, 80, 16);

        jtbluser.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtbluser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Group", "Deskripsi", "Selected"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbluser.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtbluserFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(jtbluser);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(60, 150, 730, 270);

        jtxtPassword.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtxtPasswordKeyTyped(evt);
            }
        });
        getContentPane().add(jtxtPassword);
        jtxtPassword.setBounds(250, 100, 80, 20);

        jbtnBrowse.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jbtnBrowse.setText("...");
        jbtnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBrowseActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnBrowse);
        jbtnBrowse.setBounds(340, 80, 30, 17);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
         try {
            newData();

         } catch (CodeException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formInternalFrameOpened

private void kdatePurchaseDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kdatePurchaseDateFocusLost

}//GEN-LAST:event_kdatePurchaseDateFocusLost

private void kdatePurchaseDateCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_kdatePurchaseDateCaretPositionChanged

}//GEN-LAST:event_kdatePurchaseDateCaretPositionChanged

private void kdatePurchaseDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_kdatePurchaseDatePropertyChange

}//GEN-LAST:event_kdatePurchaseDatePropertyChange

private void jtbluserFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtbluserFocusGained


}//GEN-LAST:event_jtbluserFocusGained

private void jtxtUserKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtUserKeyTyped
    activeTableUser();
}//GEN-LAST:event_jtxtUserKeyTyped

private void jtxtPasswordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtPasswordKeyTyped
    activeTableUser();
}//GEN-LAST:event_jtxtPasswordKeyTyped

private void jbtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBrowseActionPerformed

     try {
        Masterusers brs = new Masterusers();
        FrmBrowse bd = new FrmBrowse(this, brs);
        bd.setFirstValue(jtxtUser);
        bd.setModal(true);
        bd.setVisible(true);            

    } catch (CodeException ex) {
        ex.printStackTrace();
    }

}//GEN-LAST:event_jbtnBrowseActionPerformed


private void activeTableUser() {
    if (jtxtUser.getText().equals("") || jtxtPassword.getText().equals("")) {
        jtbluser.setEnabled(false);
    }else{
        jtbluser.setEnabled(true);        
    }
}

private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {                                            
    setToolBar(iformtype,istatus);
    
    mf.setIcon(CLASSNAME);

}


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmMasteruser().setVisible(true);
                } catch (CodeException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator HorizontalLine;
    private javax.swing.JLabel jHeader;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton jbtnBrowse;
    private javax.swing.JLabel jlblNama;
    private javax.swing.JLabel jlblPassword;
    private javax.swing.JLabel jlblUser;
    private javax.swing.JTable jtbluser;
    private javax.swing.JTextField jtxtNama;
    private javax.swing.JPasswordField jtxtPassword;
    private javax.swing.JTextField jtxtTanggalEntry;
    private javax.swing.JTextField jtxtTanggalUpdate;
    private javax.swing.JTextField jtxtUser;
    private javax.swing.JTextField jtxtUserId;
    private javax.swing.JTextField jtxtid;
    // End of variables declaration//GEN-END:variables

 
    public void moveFirst() throws CodeException {
        obj.moveFirst();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void movePrevious() throws CodeException {
        obj.movePrevious();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void moveNext() throws CodeException {
        obj.moveNext();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void moveLast() throws CodeException {
        obj.moveLast();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void searchData() throws CodeException {
        obj = new Masteruser(this.jtxtUser.getText());
        showData();
        mf.setIcon(CLASSNAME);
    }
    public void newData() throws CodeException {
        obj = new Masteruser();
        showData();
        setToolBar(iformtype,istatus);
        activeTableUser();
    }

    public void saveData() throws CodeException {
        
        if (!"".equals(jtxtUser.getText()) && !"".equals(jtxtPassword.getText())) {
            istatus = 0;
            setData();
            obj.save();

            for (int i = 0; i < tmodel.getRowCount(); i++) {
                String kodegroup = tmodel.getValueAt(i, 1) + "";
                boolean bselect = tmodel.getValueAt(i, 3) == null? false : Boolean.parseBoolean(tmodel.getValueAt(i, 3)+"") ;

                Masteruserdetail mb = new Masteruserdetail();
                mb.loadData(jtxtUser.getText(), kodegroup);
                
                if (bselect) {
                    mb.setUser(jtxtUser.getText());
                    mb.setKodeGroup(kodegroup);
                    mb.save();
                }else {
                    if (mb.getID() != Masteruserdetail.NULLID) {
                        mb.delete();
                    }
                }
            }
            showData();

            mf.setIcon(CLASSNAME);
        } else {
            JOptionPane.showMessageDialog(null, "User dan Password Tidak Boleh Kosong", "Form User", JOptionPane.ERROR_MESSAGE);
        }
        

    }

    public void showData() throws CodeException {
	
             jtxtid.setText(obj.toString(Masteruser.PROPERTY_ID));
             jtxtUser.setText(obj.toString(Masteruser.PROPERTY_USER));
             jtxtPassword.setText(obj.toString(Masteruser.PROPERTY_PASSWORD));
             jtxtNama.setText(obj.toString(Masteruser.PROPERTY_NAMA));
             jtxtTanggalEntry.setText(obj.toString(Masteruser.PROPERTY_TANGGALENTRY));
             jtxtTanggalUpdate.setText(obj.toString(Masteruser.PROPERTY_TANGGALUPDATE));
             jtxtUserId.setText(obj.toString(Masteruser.PROPERTY_USERID));
             
             GlobalModel.clearRow(tmodel);
             int i = 0;
             Mastergroups groups = new Mastergroups(0);

             for (Object o : groups.list()) {
                Mastergroup group = (Mastergroup) o;

                Masteruserdetail md = new Masteruserdetail();
                md.loadData(jtxtUser.getText(), group.getKodeGroup());
                
                tmodel.addRow(data);
                tmodel.setValueAt(md.getID(), i, 0);
                tmodel.setValueAt(group.getKodeGroup(), i, 1);                
                tmodel.setValueAt(group.getKeterangan(), i, 2);                
                
                if (md.getID() != Masteruserdetail.NULLID) {
                    tmodel.setValueAt(true, i, 3);                
                }
                i++;
             }
             activeTableUser();
    }

    public void delete() throws CodeException {
        obj.delete();
        obj.moveFirst();
        showData();
        setToolBar(iformtype,istatus);
    }

    public void setToolBar(int iFormType, int istatus) {
        mf.setToolBar(iformtype,istatus);        
    }

    public void setData() throws CodeException {
        
	
          obj.fromString(Masteruser.PROPERTY_ID, jtxtid.getText()) ;
          obj.fromString(Masteruser.PROPERTY_USER, jtxtUser.getText()) ;
          obj.fromString(Masteruser.PROPERTY_PASSWORD, jtxtPassword.getText()) ;
          obj.fromString(Masteruser.PROPERTY_NAMA, jtxtNama.getText()) ;
          obj.fromString(Masteruser.PROPERTY_TANGGALENTRY, jtxtTanggalEntry.getText()) ;
          obj.fromString(Masteruser.PROPERTY_TANGGALUPDATE, jtxtTanggalUpdate.getText()) ;
          obj.fromString(Masteruser.PROPERTY_USERID, jtxtUserId.getText()) ;

    }

    public void undo() throws CodeException {
        istatus = 0;
        moveFirst();
        showData();
    }

    public void execute() throws CodeException {
       saveData();
    }

    public void importCsv() throws CodeException {
            
        String file1 = "";
        String file2 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".csv";   
        
        JFileChooser chooser = new JFileChooser(".");
        chooser.setDialogTitle("Pilih File ");
        FileFilter filter1 = new ExtFileChooserFilter("CSV", new String[] { "CSV"});
        chooser.setFileFilter(filter1);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            
            try {
                file1 = selectedFile.getCanonicalPath();
            
            }catch (Exception e) {}

            GlobalUtils.copyfile(file1, file2 );                

            obj.importCsv();
            
        }else {
          JOptionPane.showMessageDialog(null,"No Selection ");
        }

    }

    public void exportCsv() throws CodeException {
        
    
        if (obj.exportCsv()) {
            
            String file1 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".csv";   
            String file2 = "";
            
            JFileChooser chooser = new JFileChooser(".");
            chooser.setDialogTitle("Pilih Directory ");
    
            if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                try {
                    file2 = chooser.getSelectedFile().getCanonicalPath() + ".csv";
                        
                    JOptionPane.showMessageDialog(null, GlobalUtils.copyfile(file1, file2 ));                    
                    
                }catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());                    
                }
                
            }else {
              JOptionPane.showMessageDialog(null,"No Selection ");
            }
    
        }
        
    }

    public void importText() throws CodeException {
        String file1 = "";
        String file2 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".txt";   
        
        JFileChooser chooser = new JFileChooser(".");
        chooser.setDialogTitle("Pilih File ");
        FileFilter filter1 = new ExtFileChooserFilter("txt", new String[] { "txt"});
        chooser.setFileFilter(filter1);


        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            
            try {
                file1 = selectedFile.getCanonicalPath();
            
            }catch (Exception e) {}

            GlobalUtils.copyfile(file1, file2 );                

            obj.importCsv();
            
        }else {
          JOptionPane.showMessageDialog(null,"No Selection ");
        }
    }

    public void exportText() throws CodeException {
        if (obj.exportText()) {
            
            String file1 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".txt";   
            String file2 = "";
            
            JFileChooser chooser = new JFileChooser(".");
            chooser.setDialogTitle("Pilih Directory ");
    
            if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                try {
                    file2 = chooser.getSelectedFile().getCanonicalPath() + ".txt";                        
                    JOptionPane.showMessageDialog(null, GlobalUtils.copyfile(file1, file2 ));                    
                    
                }catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());                    
                }
                
            }else {
              JOptionPane.showMessageDialog(null,"No Selection ");
            }
    
        } 
    }

    public void printData() throws CodeException {
        FrmPrintMasterUser fprint = new FrmPrintMasterUser();
        fprint.jtxtKodeUser.setText(jtxtUser.getText());       
        fprint.setVisible(true);
        

    }
    
}
