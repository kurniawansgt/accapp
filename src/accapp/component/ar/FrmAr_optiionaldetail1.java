/*
 * From Template
 *
 * Created on June 29, 2007, 2:00 PM
 * 
 * 
 * How to Call this Form on FrmMainFrame
 * Sample : 
 *    
 * import test.FrmAr_optiionaldetail1;
 * 
 * .......
 * 
 * 
 * FrmAr_optiionaldetail1 frmAr_optiionaldetail1;
 * 
 * .......
 * 
 try {
        if (frmAr_optiionaldetail1 == null) {
            frmmAr_optiionaldetail1 = new FrmAr_optiionaldetail1(this);
        }
        
        showForm(frmAr_optiionaldetail1);
        
    }catch(Exception e) {
        e.printStackTrace();
    }
 * 
 */

package accapp.component.ar;

import common.component.FrmBrowse;
import common.classinterface.NavigatorFormInt;
import common.classinterface.NavigatorObjectInt;
import common.component.FrmMainFrame;

import common.utils.CodeException;
import common.utils.GlobalUtils;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import common.utils.ExtFileChooserFilter;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import accapp.objectclasses.ar.Ar_optiionaldetail1;
import accapp.objectclasses.ar.Ar_optiionaldetail1s;
import common.print.FrmPrintMasterAROptionalDetail1;
import java.awt.event.KeyEvent;

/**
 *
 * @author  Generator
 */

public class FrmAr_optiionaldetail1 extends javax.swing.JInternalFrame implements NavigatorFormInt {

    private static int istatus = 0;
    private static int iformtype = 0;
    public static String CLASSNAME="FrmAr_optiionaldetail1";
    
    FrmMainFrame mf ;
    
    
    public Ar_optiionaldetail1 obj = new Ar_optiionaldetail1();
    
   
    /** Creates new form Area */
    public FrmAr_optiionaldetail1() throws CodeException {
        initComponents();
    }
    
    public FrmAr_optiionaldetail1(FrmMainFrame mf) throws CodeException{
        this.mf = mf;
        initComponents();

        jtxtid.setBounds(180, 30, 80, 20);
        jtxtentrydate.setBounds(260, 30, 160, 20);
        jtxtauditdate.setBounds(420, 30, 140, 20);
        jtxtaudituser.setBounds(560, 30, 110, 20);
        jtxtcmpnyid.setBounds(670, 30, 120, 20);

        jtxtid.setEditable(false);
        jtxtentrydate.setEditable(false);
        jtxtauditdate.setEditable(false);
        jtxtaudituser.setEditable(false);
        jtxtcmpnyid.setEditable(false);
    }
     
       
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jHeader = new javax.swing.JLabel();
        HorizontalLine = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jbtnBrowse = new javax.swing.JButton();
        jtxtid = new javax.swing.JTextField();
        jlbldocnumid = new javax.swing.JLabel();
        jtxtdocnumid = new javax.swing.JTextField();
        jlbldscription = new javax.swing.JLabel();
        jtxtdscription = new javax.swing.JTextField();
        jlblprefix = new javax.swing.JLabel();
        jtxtprefix = new javax.swing.JTextField();
        jlbltxtprefix = new javax.swing.JLabel();
        jtxttxtprefix = new javax.swing.JTextField();
        jlbldocnum = new javax.swing.JLabel();
        jtxtdocnum = new javax.swing.JTextField();
        jlbllengthno = new javax.swing.JLabel();
        jtxtlengthno = new javax.swing.JTextField();
        jlblobjtype = new javax.swing.JLabel();
        jtxtobjtype = new javax.swing.JTextField();
        jtxtentrydate = new javax.swing.JTextField();
        jtxtauditdate = new javax.swing.JTextField();
        jtxtaudituser = new javax.swing.JTextField();
        jtxtcmpnyid = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ar_optiionaldetail1");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jHeader.setBackground(new java.awt.Color(102, 102, 102));
        jHeader.setFont(new java.awt.Font("Dialog", 1, 10));
        jHeader.setForeground(new java.awt.Color(255, 255, 255));
        jHeader.setText(" : : Ar_optiionaldetail1");
        jHeader.setAlignmentY(0.0F);
        jHeader.setOpaque(true);
        getContentPane().add(jHeader);
        jHeader.setBounds(30, 30, 130, 20);

        HorizontalLine.setForeground(new java.awt.Color(102, 102, 102));
        HorizontalLine.setAlignmentX(0.0F);
        HorizontalLine.setAlignmentY(0.0F);
        getContentPane().add(HorizontalLine);
        HorizontalLine.setBounds(160, 50, 650, 2);

        jSeparator3.setForeground(new java.awt.Color(102, 102, 102));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setAlignmentX(0.0F);
        jSeparator3.setAlignmentY(0.0F);
        getContentPane().add(jSeparator3);
        jSeparator3.setBounds(30, 50, 2, 400);

        jbtnBrowse.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jbtnBrowse.setText("...");
        jbtnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBrowseActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnBrowse);
        jbtnBrowse.setBounds(340, 100, 30, 17);

        jtxtid.setEditable(false);
        jtxtid.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtid.setText("id");
        getContentPane().add(jtxtid);
        jtxtid.setBounds(300, 30, 80, 16);

        jlbldocnumid.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlbldocnumid.setText("Doc Num Id");
        getContentPane().add(jlbldocnumid);
        jlbldocnumid.setBounds(70, 100, 140, 14);

        jtxtdocnumid.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxtdocnumid.setText("docnumid");
        jtxtdocnumid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtdocnumidKeyPressed(evt);
            }
        });
        getContentPane().add(jtxtdocnumid);
        jtxtdocnumid.setBounds(260, 100, 80, 20);

        jlbldscription.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlbldscription.setText("Description");
        getContentPane().add(jlbldscription);
        jlbldscription.setBounds(70, 120, 140, 14);

        jtxtdscription.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxtdscription.setText("dscription");
        jtxtdscription.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtdscriptionKeyPressed(evt);
            }
        });
        getContentPane().add(jtxtdscription);
        jtxtdscription.setBounds(260, 120, 430, 20);

        jlblprefix.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlblprefix.setText("Prefix");
        getContentPane().add(jlblprefix);
        jlblprefix.setBounds(70, 140, 140, 14);

        jtxtprefix.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxtprefix.setText("prefix");
        jtxtprefix.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtprefixKeyPressed(evt);
            }
        });
        getContentPane().add(jtxtprefix);
        jtxtprefix.setBounds(260, 140, 80, 20);

        jlbltxtprefix.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlbltxtprefix.setText("Txtprefix");
        getContentPane().add(jlbltxtprefix);
        jlbltxtprefix.setBounds(70, 160, 140, 14);

        jtxttxtprefix.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxttxtprefix.setText("txtprefix");
        jtxttxtprefix.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxttxtprefixKeyPressed(evt);
            }
        });
        getContentPane().add(jtxttxtprefix);
        jtxttxtprefix.setBounds(260, 160, 80, 20);

        jlbldocnum.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlbldocnum.setText("Docnum");
        getContentPane().add(jlbldocnum);
        jlbldocnum.setBounds(70, 180, 140, 14);

        jtxtdocnum.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxtdocnum.setText("docnum");
        jtxtdocnum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtdocnumKeyPressed(evt);
            }
        });
        getContentPane().add(jtxtdocnum);
        jtxtdocnum.setBounds(260, 180, 80, 20);

        jlbllengthno.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlbllengthno.setText("Length No");
        getContentPane().add(jlbllengthno);
        jlbllengthno.setBounds(70, 200, 140, 14);

        jtxtlengthno.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxtlengthno.setText("lengthno");
        jtxtlengthno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtlengthnoKeyPressed(evt);
            }
        });
        getContentPane().add(jtxtlengthno);
        jtxtlengthno.setBounds(260, 200, 80, 20);

        jlblobjtype.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlblobjtype.setText("objtype");
        getContentPane().add(jlblobjtype);
        jlblobjtype.setBounds(70, 220, 140, 14);

        jtxtobjtype.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxtobjtype.setText("objtype");
        getContentPane().add(jtxtobjtype);
        jtxtobjtype.setBounds(260, 220, 80, 20);

        jtxtentrydate.setEditable(false);
        jtxtentrydate.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtentrydate.setText("entrydate");
        getContentPane().add(jtxtentrydate);
        jtxtentrydate.setBounds(380, 30, 80, 16);

        jtxtauditdate.setEditable(false);
        jtxtauditdate.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtauditdate.setText("auditdate");
        getContentPane().add(jtxtauditdate);
        jtxtauditdate.setBounds(460, 30, 80, 16);

        jtxtaudituser.setEditable(false);
        jtxtaudituser.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtaudituser.setText("audituser");
        getContentPane().add(jtxtaudituser);
        jtxtaudituser.setBounds(540, 30, 80, 16);

        jtxtcmpnyid.setEditable(false);
        jtxtcmpnyid.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtcmpnyid.setText("cmpnyid");
        getContentPane().add(jtxtcmpnyid);
        jtxtcmpnyid.setBounds(620, 30, 80, 16);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
         try {
            moveFirst();

         } catch (CodeException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formInternalFrameOpened

private void kdatePurchaseDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kdatePurchaseDateFocusLost

}//GEN-LAST:event_kdatePurchaseDateFocusLost

private void kdatePurchaseDateCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_kdatePurchaseDateCaretPositionChanged

}//GEN-LAST:event_kdatePurchaseDateCaretPositionChanged

private void kdatePurchaseDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_kdatePurchaseDatePropertyChange

}//GEN-LAST:event_kdatePurchaseDatePropertyChange

private void jtxtdocnumidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtdocnumidKeyPressed

    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        jtxtdscription.requestFocus();
    }


}//GEN-LAST:event_jtxtdocnumidKeyPressed

private void jtxtdscriptionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtdscriptionKeyPressed

    if(evt.getKeyCode() == KeyEvent.VK_ENTER){
        jtxtprefix.requestFocus();
    }
}//GEN-LAST:event_jtxtdscriptionKeyPressed

private void jtxtprefixKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtprefixKeyPressed

    if(evt.getKeyCode() == KeyEvent.VK_ENTER){
        jtxttxtprefix.requestFocus();
    }
    
}//GEN-LAST:event_jtxtprefixKeyPressed

private void jtxttxtprefixKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxttxtprefixKeyPressed

    if(evt.getKeyCode() == KeyEvent.VK_ENTER){
        jtxtdocnum.requestFocus();
    }
    
}//GEN-LAST:event_jtxttxtprefixKeyPressed

private void jtxtdocnumKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtdocnumKeyPressed

    if(evt.getKeyCode() == KeyEvent.VK_ENTER){
        jtxtlengthno.requestFocus();
    }
    
}//GEN-LAST:event_jtxtdocnumKeyPressed

private void jtxtlengthnoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtlengthnoKeyPressed

    if(evt.getKeyCode() == KeyEvent.VK_ENTER){
        jtxtobjtype.requestFocus();
    }

    
}//GEN-LAST:event_jtxtlengthnoKeyPressed


private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {                                            
    setToolBar(iformtype,istatus);
    mf.setIcon(CLASSNAME);
}                                           

private void jbtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {                                           
      try {
	      Ar_optiionaldetail1s brs = new Ar_optiionaldetail1s();
	      FrmBrowse bd = new FrmBrowse(this, brs);
	      bd.setFirstValue(jtxtdocnumid);
	      bd.setModal(true);	      bd.setVisible(true);            
	      
	  } catch (CodeException ex) {
	      ex.printStackTrace();
	  }
}                                                                                 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmAr_optiionaldetail1().setVisible(true);
                } catch (CodeException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator HorizontalLine;
    private javax.swing.JLabel jHeader;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton jbtnBrowse;
    private javax.swing.JLabel jlbldocnum;
    private javax.swing.JLabel jlbldocnumid;
    private javax.swing.JLabel jlbldscription;
    private javax.swing.JLabel jlbllengthno;
    private javax.swing.JLabel jlblobjtype;
    private javax.swing.JLabel jlblprefix;
    private javax.swing.JLabel jlbltxtprefix;
    private javax.swing.JTextField jtxtauditdate;
    private javax.swing.JTextField jtxtaudituser;
    private javax.swing.JTextField jtxtcmpnyid;
    private javax.swing.JTextField jtxtdocnum;
    private javax.swing.JTextField jtxtdocnumid;
    private javax.swing.JTextField jtxtdscription;
    private javax.swing.JTextField jtxtentrydate;
    private javax.swing.JTextField jtxtid;
    private javax.swing.JTextField jtxtlengthno;
    private javax.swing.JTextField jtxtobjtype;
    private javax.swing.JTextField jtxtprefix;
    private javax.swing.JTextField jtxttxtprefix;
    // End of variables declaration//GEN-END:variables

 
    public void moveFirst() throws CodeException {
        obj.moveFirst();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void movePrevious() throws CodeException {
        obj.movePrevious();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void moveNext() throws CodeException {
        obj.moveNext();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void moveLast() throws CodeException {
        obj.moveLast();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void searchData() throws CodeException {
        obj = new Ar_optiionaldetail1(this.jtxtdocnumid.getText());
        showData();
        mf.setIcon(CLASSNAME);

    }
    public void newData() throws CodeException {
        obj = new Ar_optiionaldetail1();
        istatus=1;
        showData();
        setToolBar(iformtype,istatus);
    }

    public void saveData() throws CodeException {
        istatus = 0;
        setData();
        obj.save();
        
        showData();
        
        mf.setIcon(CLASSNAME);
    }

    public void showData() throws CodeException {
        setCursor(GlobalUtils.HOURGLASSCURSOR);
	
             jtxtid.setText(obj.toString(Ar_optiionaldetail1.PROPERTY_ID));
             jtxtdocnumid.setText(obj.toString(Ar_optiionaldetail1.PROPERTY_DOCNUMID));
             jtxtdscription.setText(obj.toString(Ar_optiionaldetail1.PROPERTY_DSCRIPTION));
             jtxtprefix.setText(obj.toString(Ar_optiionaldetail1.PROPERTY_PREFIX));
             jtxttxtprefix.setText(obj.toString(Ar_optiionaldetail1.PROPERTY_TXTPREFIX));
             jtxtdocnum.setText(obj.toString(Ar_optiionaldetail1.PROPERTY_DOCNUM));
             jtxtlengthno.setText(obj.toString(Ar_optiionaldetail1.PROPERTY_LENGTHNO));
             jtxtobjtype.setText(obj.toString(Ar_optiionaldetail1.PROPERTY_OBJTYPE));
             jtxtentrydate.setText(obj.toString(Ar_optiionaldetail1.PROPERTY_ENTRYDATE));
             jtxtauditdate.setText(obj.toString(Ar_optiionaldetail1.PROPERTY_AUDITDATE));
             jtxtaudituser.setText(obj.toString(Ar_optiionaldetail1.PROPERTY_AUDITUSER));
             jtxtcmpnyid.setText(obj.toString(Ar_optiionaldetail1.PROPERTY_CMPNYID));
        setCursor(GlobalUtils.NORMALCURSOR);
    }

    public void delete() throws CodeException {
        obj.delete();
        obj.moveFirst();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void setToolBar(int iFormType, int istatus) {
        mf.setToolBar(iformtype,istatus);        
    }

    public void setData() throws CodeException {
        
	
          obj.fromString(Ar_optiionaldetail1.PROPERTY_ID, jtxtid.getText()) ;
          obj.fromString(Ar_optiionaldetail1.PROPERTY_DOCNUMID, jtxtdocnumid.getText()) ;
          obj.fromString(Ar_optiionaldetail1.PROPERTY_DSCRIPTION, jtxtdscription.getText()) ;
          obj.fromString(Ar_optiionaldetail1.PROPERTY_PREFIX, jtxtprefix.getText()) ;
          obj.fromString(Ar_optiionaldetail1.PROPERTY_TXTPREFIX, jtxttxtprefix.getText()) ;
          obj.fromString(Ar_optiionaldetail1.PROPERTY_DOCNUM, jtxtdocnum.getText()) ;
          obj.fromString(Ar_optiionaldetail1.PROPERTY_LENGTHNO, jtxtlengthno.getText()) ;
          obj.fromString(Ar_optiionaldetail1.PROPERTY_OBJTYPE, jtxtobjtype.getText()) ;
          obj.fromString(Ar_optiionaldetail1.PROPERTY_ENTRYDATE, jtxtentrydate.getText()) ;
          obj.fromString(Ar_optiionaldetail1.PROPERTY_AUDITDATE, jtxtauditdate.getText()) ;
          obj.fromString(Ar_optiionaldetail1.PROPERTY_AUDITUSER, jtxtaudituser.getText()) ;
          obj.fromString(Ar_optiionaldetail1.PROPERTY_CMPNYID, jtxtcmpnyid.getText()) ;

    }

    public void undo() throws CodeException {
        istatus = 0;
        moveFirst();
        showData();
    }

    public void execute() throws CodeException {
       saveData();
    }

    public void printData() throws CodeException {
        FrmPrintMasterAROptionalDetail1 fprint = new FrmPrintMasterAROptionalDetail1();
        fprint.jtxtDocNum.setText(jtxtdocnumid.getText());
        fprint.setVisible(true);
    }

    public void importCsv() throws CodeException {
            
        String file1 = "";
        String file2 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".csv";   
        
        JFileChooser chooser = new JFileChooser(".");
        chooser.setDialogTitle("Pilih File ");
        FileFilter filter1 = new ExtFileChooserFilter("CSV", new String[] { "CSV"});
        chooser.setFileFilter(filter1);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            
            try {
                file1 = selectedFile.getCanonicalPath();
            
            }catch (Exception e) {}

            GlobalUtils.copyfile(file1, file2 );                

            obj.importCsv();
            
        }else {
          JOptionPane.showMessageDialog(null,"No Selection ");
        }

    }

    public void exportCsv() throws CodeException {
        
    
        if (obj.exportCsv()) {
            
            String file1 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".csv";   
            String file2 = "";
            
            JFileChooser chooser = new JFileChooser(".");
            chooser.setDialogTitle("Pilih Directory ");
    
            if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                try {
                    file2 = chooser.getSelectedFile().getCanonicalPath() + ".csv";
                        
                    JOptionPane.showMessageDialog(null, GlobalUtils.copyfile(file1, file2 ));                    
                    
                }catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());                    
                }
                
            }else {
              JOptionPane.showMessageDialog(null,"No Selection ");
            }
    
        }
        
    }

    public void importText() throws CodeException {
        String file1 = "";
        String file2 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".txt";   
        
        JFileChooser chooser = new JFileChooser(".");
        chooser.setDialogTitle("Pilih File ");
        FileFilter filter1 = new ExtFileChooserFilter("txt", new String[] { "txt"});
        chooser.setFileFilter(filter1);


        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            
            try {
                file1 = selectedFile.getCanonicalPath();
            
            }catch (Exception e) {}

            GlobalUtils.copyfile(file1, file2 );                

            obj.importCsv();
            
        }else {
          JOptionPane.showMessageDialog(null,"No Selection ");
        }
    }

    public void exportText() throws CodeException {
        if (obj.exportText()) {
            
            String file1 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".txt";   
            String file2 = "";
            
            JFileChooser chooser = new JFileChooser(".");
            chooser.setDialogTitle("Pilih Directory ");
    
            if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                try {
                    file2 = chooser.getSelectedFile().getCanonicalPath() + ".txt";                        
                    JOptionPane.showMessageDialog(null, GlobalUtils.copyfile(file1, file2 ));                    
                    
                }catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());                    
                }
                
            }else {
              JOptionPane.showMessageDialog(null,"No Selection ");
            }
    
        } 
    }

    
}
