/*
 * From Template
 *
 * Created on June 29, 2007, 2:00 PM
 * 
 * 
 * How to Call this Form on FrmMainFrame
 * Sample : 
 *    
 * import test.FrmAr_invh;
 * 
 * .......
 * 
 * 
 * FrmAr_invh frmAr_invh;
 * 
 * .......
 * 
 try {
        if (frmAr_invh == null) {
            frmmAr_invh = new FrmAr_invh(this);
        }
        
        showForm(frmAr_invh);
        
    }catch(Exception e) {
        e.printStackTrace();
    }
 * 
 */

package accapp.component.ar;

import accapp.objectclasses.ar.Ar_invbatchlist;
import accapp.objectclasses.ar.Ar_invbatchlists;
import common.component.FrmBrowse;
import common.classinterface.NavigatorFormInt;
import common.classinterface.NavigatorObjectInt;
import common.component.FrmMainFrame;
import common.tablemodels.GlobalModel;

import common.utils.CodeException;
import common.utils.GlobalUtils;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author  Generator
 */

public class FrmAr_invh extends javax.swing.JInternalFrame implements NavigatorFormInt {

    private static int istatus = 0;
    private static int iformtype = 0;
    public static String CLASSNAME="FrmAr_invh";
    
    FrmMainFrame mf ;

    Object[] datadetail;
    DefaultTableModel tmodeldetail;
    
    
    public Ar_invbatchlists obj = new Ar_invbatchlists();

   
    /** Creates new form Area */
    public FrmAr_invh() throws CodeException {
        initComponents();
    }
    
    public FrmAr_invh(FrmMainFrame mf) throws CodeException{
        this.mf = mf;
        initComponents();

        datadetail = new Object[jtblDetail.getRowCount()];
        tmodeldetail = (DefaultTableModel) jtblDetail.getModel();


    }
     
       
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jHeader = new javax.swing.JLabel();
        HorizontalLine = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jbtnBrowse1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblDetail = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("AR Invoice Batch List");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jHeader.setBackground(new java.awt.Color(102, 102, 102));
        jHeader.setFont(new java.awt.Font("Dialog", 1, 10));
        jHeader.setForeground(new java.awt.Color(255, 255, 255));
        jHeader.setText(" : : AR Invoice Batch List");
        jHeader.setAlignmentY(0.0F);
        jHeader.setOpaque(true);
        getContentPane().add(jHeader);
        jHeader.setBounds(30, 30, 130, 20);

        HorizontalLine.setForeground(new java.awt.Color(102, 102, 102));
        HorizontalLine.setAlignmentX(0.0F);
        HorizontalLine.setAlignmentY(0.0F);
        getContentPane().add(HorizontalLine);
        HorizontalLine.setBounds(160, 50, 650, 2);

        jSeparator3.setForeground(new java.awt.Color(102, 102, 102));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setAlignmentX(0.0F);
        jSeparator3.setAlignmentY(0.0F);
        getContentPane().add(jSeparator3);
        jSeparator3.setBounds(30, 50, 2, 400);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 10));
        jLabel1.setText("Starting Batch Number");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(60, 70, 180, 14);
        getContentPane().add(jTextField1);
        jTextField1.setBounds(210, 70, 90, 20);

        jbtnBrowse1.setText("...");
        jbtnBrowse1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBrowse1ActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnBrowse1);
        jbtnBrowse1.setBounds(300, 70, 30, 17);

        jtblDetail.setFont(new java.awt.Font("Dialog", 0, 10));
        jtblDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Batch", "Batch Date", "Description", "Entries", "Amount", "Ready", "Type", "Status", "Post Seq"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblDetailMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jtblDetailMouseEntered(evt);
            }
        });
        jtblDetail.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jtblDetailPropertyChange(evt);
            }
        });
        jtblDetail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtblDetailKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtblDetailKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jtblDetail);
        jtblDetail.getColumnModel().getColumn(0).setPreferredWidth(60);
        jtblDetail.getColumnModel().getColumn(2).setMinWidth(200);
        jtblDetail.getColumnModel().getColumn(4).setPreferredWidth(150);
        jtblDetail.getColumnModel().getColumn(5).setPreferredWidth(60);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(60, 100, 730, 310);

        jButton1.setFont(new java.awt.Font("Dialog", 0, 10));
        jButton1.setText("Open");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(60, 420, 100, 23);

        jButton2.setFont(new java.awt.Font("Dialog", 0, 10));
        jButton2.setText("New");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(160, 420, 100, 23);

        jButton3.setFont(new java.awt.Font("Dialog", 0, 10));
        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(260, 420, 100, 23);

        jButton4.setFont(new java.awt.Font("Dialog", 0, 10));
        jButton4.setText("Post");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(360, 420, 100, 23);

        jButton5.setFont(new java.awt.Font("Dialog", 0, 10));
        jButton5.setText("Print");
        getContentPane().add(jButton5);
        jButton5.setBounds(460, 420, 100, 23);

        jButton6.setFont(new java.awt.Font("Dialog", 0, 10));
        jButton6.setText("Show Data");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6);
        jButton6.setBounds(680, 70, 110, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
         try {
            moveFirst();

         } catch (CodeException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formInternalFrameOpened

private void kdatePurchaseDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kdatePurchaseDateFocusLost

}//GEN-LAST:event_kdatePurchaseDateFocusLost

private void kdatePurchaseDateCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_kdatePurchaseDateCaretPositionChanged

}//GEN-LAST:event_kdatePurchaseDateCaretPositionChanged

private void kdatePurchaseDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_kdatePurchaseDatePropertyChange

}//GEN-LAST:event_kdatePurchaseDatePropertyChange

private void jbtnBrowse1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBrowse1ActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_jbtnBrowse1ActionPerformed

private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
    // TODO add your handling code here:
    showdata();
}//GEN-LAST:event_jButton6ActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    // TODO add your handling code here:
    int row=jtblDetail.getSelectedRow();

    if (row>-1){
        try {
            this.mf.showInvoiceEntry((Ar_invbatchlist) obj.list().get(row),0);
        } catch (CodeException ex) {
            Logger.getLogger(FrmAr_invh.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}//GEN-LAST:event_jButton1ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    // TODO add your handling code here:
    
    try {
        this.mf.showInvoiceEntry((Ar_invbatchlist) obj.list().get(0),1);
    } catch (CodeException ex) {
        Logger.getLogger(FrmAr_invh.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_jButton2ActionPerformed

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    // TODO add your handling code here:
    int row=jtblDetail.getSelectedRow();

    if (row>-1){
        try {
            Ar_invbatchlist arinvb=(Ar_invbatchlist) obj.list().get(row);
            deletedata(arinvb, row);
        } catch (CodeException ex) {
            Logger.getLogger(FrmAr_invh.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}//GEN-LAST:event_jButton3ActionPerformed

private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    // TODO add your handling code here:
    int row=jtblDetail.getSelectedRow();

    if (row>-1){
        try {
            if (Boolean.parseBoolean(jtblDetail.getValueAt(row, 5).toString())){
                Ar_invbatchlist arinvb=(Ar_invbatchlist) obj.list().get(row);
                if (postingdata(arinvb, row)){
                    jtblDetail.setValueAt(true, row, 5);
                    jtblDetail.setValueAt("Posted", row, 7);
                    jtblDetail.setValueAt(arinvb.getpostngseq(), row, 8);

                    jButton4.setEnabled(false);
                    jButton3.setEnabled(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Invalid Procedure, Batch List Should Be Ready To Post to be Processed!!");
            }
        } catch (CodeException ex) {
            Logger.getLogger(FrmAr_invh.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}//GEN-LAST:event_jButton4ActionPerformed

private void jtblDetailMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblDetailMouseEntered
    // TODO add your handling code here:
    
}//GEN-LAST:event_jtblDetailMouseEntered

private void jtblDetailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtblDetailKeyPressed
    // TODO add your handling code here:
    
}//GEN-LAST:event_jtblDetailKeyPressed

private void jtblDetailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtblDetailKeyReleased
    // TODO add your handling code here:
    int irow=jtblDetail.getSelectedRow();

    if (irow>-1){
        if (evt.getKeyCode()==evt.VK_UP||evt.getKeyCode()==evt.VK_DOWN){
            if (jtblDetail.getValueAt(irow, 7).toString().equalsIgnoreCase("Posted")||jtblDetail.getValueAt(irow, 7).toString().equalsIgnoreCase("Delete")){
                jButton4.setEnabled(false);
                jButton3.setEnabled(false);
            } else {
                if (Boolean.parseBoolean(jtblDetail.getValueAt(irow, 5).toString())){
                    jButton4.setEnabled(true);
                } else {
                    jButton4.setEnabled(false);
                    jButton3.setEnabled(true);
                }
            }
        }
    }
}//GEN-LAST:event_jtblDetailKeyReleased

private void jtblDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblDetailMouseClicked
    // TODO add your handling code here:
    int irow=jtblDetail.getSelectedRow();

    if (irow>-1){
        if (jtblDetail.getValueAt(irow, 7).toString().equalsIgnoreCase("Posted")||jtblDetail.getValueAt(irow, 7).toString().equalsIgnoreCase("Deleted")){
            jButton4.setEnabled(false);
            jButton3.setEnabled(false);
            jButton5.setEnabled(false);
            jtblDetail.setValueAt(true, irow, 5);
        } else {
                try {
                    Ar_invbatchlist apinvb = (Ar_invbatchlist) obj.list().get(irow);
                    if (Boolean.parseBoolean(jtblDetail.getValueAt(irow, 5).toString())){
                        apinvb.ReadtoPostMe(true);
                        jButton4.setEnabled(true);
                    } else {
                        apinvb.ReadtoPostMe(false);
                        jButton4.setEnabled(false);
                        jButton3.setEnabled(true);
                    }
                } catch (CodeException ex) {
                    Logger.getLogger(FrmAr_invh.class.getName()).log(Level.SEVERE, null, ex);
                }
            
        }
    }
}//GEN-LAST:event_jtblDetailMouseClicked

private void jtblDetailPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jtblDetailPropertyChange
    // TODO add your handling code here:
    int irow=jtblDetail.getSelectedRow();
    int icol=jtblDetail.getSelectedColumn();

    if (irow>-1&&icol==5){
        if (jtblDetail.getValueAt(irow, 7).toString().equalsIgnoreCase("Posted")||jtblDetail.getValueAt(irow, 7).toString().equalsIgnoreCase("Delete")){
            jButton4.setEnabled(false);
            jButton3.setEnabled(false);
            jtblDetail.setValueAt(true, irow, 5);
        } else {
            if (Boolean.parseBoolean(jtblDetail.getValueAt(irow, 5).toString())){
                jButton4.setEnabled(true);
            } else {
                jButton4.setEnabled(false);
                jButton3.setEnabled(true);
            }
        }
    }
}//GEN-LAST:event_jtblDetailPropertyChange


private Boolean deletedata(Ar_invbatchlist arinvb,int row){
    int idelete;
        try {
            idelete = JOptionPane.showConfirmDialog(null, "Do you want to delete entry# " + arinvb.getbatchno(), "Delete", JOptionPane.YES_NO_OPTION);
            if (idelete == JOptionPane.YES_OPTION) {
                arinvb.delete();
                obj.list().remove(row);
                tmodeldetail.removeRow(row);
            }
        } catch (CodeException ex) {
            Logger.getLogger(FrmAr_invh.class.getName()).log(Level.SEVERE, null, ex);
        }


    return false;
}
private Boolean postingdata(Ar_invbatchlist arinvb,int row){
    int idelete;
        try {
            idelete = JOptionPane.showConfirmDialog(null, "Do you want to posting entry# " + arinvb.getbatchno(), "Delete", JOptionPane.YES_NO_OPTION);
            if (idelete == JOptionPane.YES_OPTION) {
                if (arinvb.runARInvoicePosting(arinvb.getbatchno(), arinvb.getbatchno())){
                    return true;
                }
            }
        } catch (CodeException ex) {
            Logger.getLogger(FrmAr_invh.class.getName()).log(Level.SEVERE, null, ex);
        }


    return false;
}
private void showdata(){
        try {
            setCursor(GlobalUtils.HOURGLASSCURSOR);
            obj.searchData(jTextField1.getText());
            GlobalModel.clearRow(tmodeldetail);
            for (Object o:obj.list()){
                Ar_invbatchlist arinvbat=(Ar_invbatchlist) o;

                tmodeldetail.addRow(datadetail);
                tmodeldetail.setValueAt(arinvbat.getbatchno(), tmodeldetail.getRowCount()-1, 0);
                tmodeldetail.setValueAt(GlobalUtils.formatDate(arinvbat.getbatchdate(),"MM/dd/yyyy"), tmodeldetail.getRowCount()-1, 1);
                tmodeldetail.setValueAt(arinvbat.getbatchdesc(), tmodeldetail.getRowCount()-1, 2);
                tmodeldetail.setValueAt(arinvbat.getinventrcnt(), tmodeldetail.getRowCount()-1, 3);
                tmodeldetail.setValueAt(arinvbat.gettotinvamt(), tmodeldetail.getRowCount()-1, 4);
                Boolean readytopost=false;
                if (GlobalUtils.churuf(arinvbat.getreadytpost()).equalsIgnoreCase("1")||arinvbat.getbatchsts().equalsIgnoreCase("2")){
                    readytopost=true;
                }
                tmodeldetail.setValueAt(readytopost, tmodeldetail.getRowCount()-1, 5);

                String batchtype="";
                switch (GlobalUtils.toInt(GlobalUtils.churuf(arinvbat.getbatchtype()))){
                     case 1:
                         batchtype="Entries";
                         break;
                     case 2:
                         batchtype="Import";
                         break;
                     case 3:
                         batchtype="Transfer";
                         break;
                }

                tmodeldetail.setValueAt(batchtype, tmodeldetail.getRowCount()-1, 6);

                String batchstatus="";
                switch (GlobalUtils.toInt(arinvbat.getbatchsts())){
                    case 1:
                        batchstatus="Open";
                        break;
                    case 2:
                        batchstatus="Posted";
                        break;
                    case 3:
                        batchstatus="Error";
                        break;
                    case 4:
                        batchstatus="Delete";
                        break;
                }

                tmodeldetail.setValueAt(batchstatus, tmodeldetail.getRowCount()-1, 7);
                tmodeldetail.setValueAt(arinvbat.getpostngseq(), tmodeldetail.getRowCount()-1, 8);
            }
            
        } catch (CodeException ex) {
            Logger.getLogger(FrmAr_invh.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            setCursor(GlobalUtils.NORMALCURSOR);
        }
}

private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {                                            
    setToolBar(iformtype,istatus);
    mf.setIcon(CLASSNAME);

    showdata();
}                                           

private void jbtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {                                           
      try {
          Ar_invbatchlists brs = new Ar_invbatchlists();
          FrmBrowse bd = new FrmBrowse(this, brs);
          bd.setFirstValue(jTextField1);
          bd.setModal(true);
          bd.setVisible(true);

      } catch (CodeException ex) {
          ex.printStackTrace();
      }
}                                                                                 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmAr_invh().setVisible(true);
                } catch (CodeException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator HorizontalLine;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jHeader;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton jbtnBrowse1;
    private javax.swing.JTable jtblDetail;
    // End of variables declaration//GEN-END:variables

 
    public void moveFirst() throws CodeException {
        //obj.moveFirst();
        mf.setIcon(CLASSNAME);
    }

    public void movePrevious() throws CodeException {
        //obj.movePrevious();
        mf.setIcon(CLASSNAME);
    }

    public void moveNext() throws CodeException {
        //obj.moveNext();
        mf.setIcon(CLASSNAME);
    }

    public void moveLast() throws CodeException {
        //obj.moveLast();
        mf.setIcon(CLASSNAME);
    }

    public void searchData() throws CodeException {
        //obj = new Ar_invh(this.jtxtid.getText());
        mf.setIcon(CLASSNAME);

    }
    public void newData() throws CodeException {
        //obj = new Ar_invh();
        istatus=1;
        setToolBar(iformtype,istatus);
    }

    public void saveData() throws CodeException {
        istatus = 0;
        setData();
        obj.save();
        
        
        mf.setIcon(CLASSNAME);
    }

    
    public void delete() throws CodeException {
        obj.delete();
        //obj.moveFirst();
        mf.setIcon(CLASSNAME);
    }

    public void setToolBar(int iFormType, int istatus) {
        mf.setToolBar(iformtype,istatus);        
    }

    
    public void undo() throws CodeException {
        istatus = 0;
        moveFirst();
    }

    public void execute() throws CodeException {
       saveData();
    }

    public void printData() throws CodeException {
        Map parameter = new HashMap();
        NavigatorObjectInt noi = (NavigatorObjectInt) obj;        
        String file   = GlobalUtils.getCurrentDir() +"/Reports/" + noi.getClassName() + ".jrxml";
        GlobalUtils.printReport(file,  false);    
    }

    
    public void showData() throws CodeException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setData() throws CodeException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void importCsv() throws CodeException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void exportCsv() throws CodeException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void importText() throws CodeException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void exportText() throws CodeException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    
}
