/*
 * From Template
 *
 * Created on June 29, 2007, 2:00 PM
 * 
 * 
 * How to Call this Form on FrmMainFrame
 * Sample : 
 *    
 * import accapp.component.ap.FrmAp_distseth;
 * 
 * .......
 * 
 * 
 * FrmAp_distseth frmAp_distseth;
 * 
 * .......
 * 
 try {
        if (frmAp_distseth == null) {
            frmmAp_distseth = new FrmAp_distseth(this);
        }
        
        showForm(frmAp_distseth);
        
    }catch(Exception e) {
        e.printStackTrace();
    }
 * 
 */

package accapp.component.ap;

import accapp.objectclasses.ap.Ap_distcode;
import accapp.objectclasses.ap.Ap_distcodes;
import accapp.objectclasses.ap.Ap_distsetd;
import common.component.FrmBrowse;
import common.classinterface.NavigatorFormInt;
import common.classinterface.NavigatorObjectInt;
import common.component.FrmMainFrame;

import common.utils.CodeException;
import common.utils.GlobalUtils;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import common.utils.ExtFileChooserFilter;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import accapp.objectclasses.ap.Ap_distseth;
import accapp.objectclasses.ap.Ap_distseths;
import common.print.FrmPrintMasterAPDistributionSetCode;
import common.tablemodels.GlobalModel;
import java.awt.event.KeyEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author  Generator
 */

public class FrmAp_distseth extends javax.swing.JInternalFrame implements NavigatorFormInt {

    private static int istatus = 0;
    private static int iformtype = 0;
    public static String CLASSNAME="FrmAp_distseth";
    
    FrmMainFrame mf ;
    
    Object[] data;
    DefaultTableModel tmodel;
    
    public Ap_distseth obj = new Ap_distseth();
    
   
    /** Creates new form Area */
    public FrmAp_distseth() throws CodeException {
        initComponents();
    }
    
    public FrmAp_distseth(FrmMainFrame mf) throws CodeException{
        this.mf = mf;
        initComponents();

        tmodel=(DefaultTableModel) jtbldetail.getModel();
        data = new Object[tmodel.getColumnCount()];

    }
     
       
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jHeader = new javax.swing.JLabel();
        HorizontalLine = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jtxtid = new javax.swing.JTextField();
        jlbldistsetcode = new javax.swing.JLabel();
        jtxtdistsetcode = new javax.swing.JTextField();
        jtxtdscription = new javax.swing.JTextField();
        jtxtentrydate = new javax.swing.JTextField();
        jtxtauditdate = new javax.swing.JTextField();
        jtxtaudituser = new javax.swing.JTextField();
        jtxtcmpnyid = new javax.swing.JTextField();
        jbtnBrowse = new javax.swing.JButton();
        jchkActive = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbldetail = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ap_distseth");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jHeader.setBackground(new java.awt.Color(102, 102, 102));
        jHeader.setFont(new java.awt.Font("Dialog", 1, 10));
        jHeader.setForeground(new java.awt.Color(255, 255, 255));
        jHeader.setText(" : : Ap_distseth");
        jHeader.setAlignmentY(0.0F);
        jHeader.setOpaque(true);
        getContentPane().add(jHeader);
        jHeader.setBounds(30, 30, 130, 20);

        HorizontalLine.setForeground(new java.awt.Color(102, 102, 102));
        HorizontalLine.setAlignmentX(0.0F);
        HorizontalLine.setAlignmentY(0.0F);
        getContentPane().add(HorizontalLine);
        HorizontalLine.setBounds(160, 50, 650, 2);

        jSeparator3.setForeground(new java.awt.Color(102, 102, 102));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setAlignmentX(0.0F);
        jSeparator3.setAlignmentY(0.0F);
        getContentPane().add(jSeparator3);
        jSeparator3.setBounds(30, 50, 2, 400);

        jtxtid.setEditable(false);
        jtxtid.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtid.setText("id");
        getContentPane().add(jtxtid);
        jtxtid.setBounds(180, 20, 80, 16);

        jlbldistsetcode.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlbldistsetcode.setText("Distribution Set");
        getContentPane().add(jlbldistsetcode);
        jlbldistsetcode.setBounds(70, 100, 140, 14);

        jtxtdistsetcode.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxtdistsetcode.setText("distsetcode");
        jtxtdistsetcode.setNextFocusableComponent(jtxtdscription);
        jtxtdistsetcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtdistsetcodeKeyPressed(evt);
            }
        });
        getContentPane().add(jtxtdistsetcode);
        jtxtdistsetcode.setBounds(260, 100, 80, 20);

        jtxtdscription.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxtdscription.setText("dscription");
        jtxtdscription.setNextFocusableComponent(jchkActive);
        jtxtdscription.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtdscriptionKeyPressed(evt);
            }
        });
        getContentPane().add(jtxtdscription);
        jtxtdscription.setBounds(390, 100, 360, 20);

        jtxtentrydate.setEditable(false);
        jtxtentrydate.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtentrydate.setText("entrydate");
        getContentPane().add(jtxtentrydate);
        jtxtentrydate.setBounds(270, 20, 80, 16);

        jtxtauditdate.setEditable(false);
        jtxtauditdate.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtauditdate.setText("auditdate");
        getContentPane().add(jtxtauditdate);
        jtxtauditdate.setBounds(360, 20, 80, 16);

        jtxtaudituser.setEditable(false);
        jtxtaudituser.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtaudituser.setText("audituser");
        getContentPane().add(jtxtaudituser);
        jtxtaudituser.setBounds(450, 20, 80, 16);

        jtxtcmpnyid.setEditable(false);
        jtxtcmpnyid.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtcmpnyid.setText("cmpnyid");
        getContentPane().add(jtxtcmpnyid);
        jtxtcmpnyid.setBounds(540, 20, 80, 16);

        jbtnBrowse.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jbtnBrowse.setText("...");
        jbtnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBrowseActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnBrowse);
        jbtnBrowse.setBounds(350, 100, 30, 17);

        jchkActive.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jchkActive.setText("Active");
        jchkActive.setNextFocusableComponent(jtbldetail);
        jchkActive.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jchkActiveKeyPressed(evt);
            }
        });
        getContentPane().add(jchkActive);
        jchkActive.setBounds(260, 130, 98, 23);

        jtbldetail.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtbldetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "id", "Dist Code", "Description", "GL Account"
            }
        ));
        jtbldetail.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jtbldetailPropertyChange(evt);
            }
        });
        jtbldetail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtbldetailKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jtbldetail);
        jtbldetail.getColumnModel().getColumn(0).setMinWidth(0);
        jtbldetail.getColumnModel().getColumn(0).setPreferredWidth(0);
        jtbldetail.getColumnModel().getColumn(0).setMaxWidth(0);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(70, 170, 690, 200);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
         try {
            moveFirst();

         } catch (CodeException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formInternalFrameOpened

private void kdatePurchaseDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kdatePurchaseDateFocusLost

}//GEN-LAST:event_kdatePurchaseDateFocusLost

private void kdatePurchaseDateCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_kdatePurchaseDateCaretPositionChanged

}//GEN-LAST:event_kdatePurchaseDateCaretPositionChanged

private void kdatePurchaseDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_kdatePurchaseDatePropertyChange

}//GEN-LAST:event_kdatePurchaseDatePropertyChange

private void jbtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBrowseActionPerformed
      try {
	      Ap_distseths brs = new Ap_distseths();
	      FrmBrowse bd = new FrmBrowse(this, brs);
	      bd.setFirstValue(jtxtdistsetcode);
	      bd.setModal(true);
	      bd.setVisible(true);

	  } catch (CodeException ex) {
	      ex.printStackTrace();
	  }
}//GEN-LAST:event_jbtnBrowseActionPerformed

private void jtbldetailPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jtbldetailPropertyChange

    int row = jtbldetail.getSelectedRow();
    int col = jtbldetail.getSelectedColumn();

    if (row > -1) {

        if (col == 1) {

            try{
                Ap_distsetd add = new Ap_distsetd(tmodel.getValueAt(row, 1)+"");


                tmodel.setValueAt(add.getAp_DistDesc(), row, 2);
                tmodel.setValueAt(add.getAp_DistGL(), row, 3);

            }catch(Exception e) {
                e.printStackTrace();

            }

        }


        try{

            cetAP_Detail();

        }catch(Exception e) {e.printStackTrace();}

    }
}//GEN-LAST:event_jtbldetailPropertyChange

private void jtbldetailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtbldetailKeyPressed

    int row = jtbldetail.getSelectedRow();
    int col = jtbldetail.getSelectedColumn();


    if (evt.getKeyCode() == KeyEvent.VK_F5 ){
        try {

            Ap_distcodes brs = new Ap_distcodes(0);
            FrmBrowse bd = new FrmBrowse(tmodel, brs, row, 1);
            bd.retrieveData();
            bd.setModal(true);
            bd.setVisible(true);

            Ap_distcode apdc = new Ap_distcode(tmodel.getValueAt(row, 1)+"");
            tmodel.setValueAt(apdc.getdscription(), row, 2);
            tmodel.setValueAt(apdc.getglacccode(), row, 3);


            cetAP_Detail();

        } catch (CodeException ex) {
            ex.printStackTrace();
        }

    }

    if (evt.getKeyCode() == KeyEvent.VK_INSERT) {
        tmodel.addRow(data);
        tmodel.setValueAt("0", tmodel.getRowCount() - 1, 0);
        GlobalUtils.selectCellTable(jtbldetail, tmodel.getRowCount() - 1, 1);
    }

    if (evt.getKeyCode() == KeyEvent.VK_DELETE) {

        int iquestion = JOptionPane.showConfirmDialog(null, "Anda Ingin Menghapus Baris Ke " + (row+1), "Hapus ", JOptionPane.YES_NO_OPTION);
        if ( iquestion == JOptionPane.YES_OPTION) {

            try{
                obj.removeAP_SetD(row);
            }catch(Exception e){e.printStackTrace();}

            tmodel.removeRow(row);

            if (row+1 < tmodel.getRowCount()) {
                GlobalUtils.selectCellTable(jtbldetail, row, 1);
            }else{
                GlobalUtils.selectCellTable(jtbldetail, tmodel.getRowCount()-1, 1);
            }

        }
    }


}//GEN-LAST:event_jtbldetailKeyPressed

private void jtxtdistsetcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtdistsetcodeKeyPressed

    if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
        jtxtdscription.requestFocus();
    }
    
}//GEN-LAST:event_jtxtdistsetcodeKeyPressed

private void jtxtdscriptionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtdscriptionKeyPressed

    if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
        jchkActive.requestFocus();
    }

    
}//GEN-LAST:event_jtxtdscriptionKeyPressed

private void jchkActiveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jchkActiveKeyPressed


    if (evt.getKeyCode() == evt.VK_ENTER) {
        jtbldetail.requestFocus();
    }
    
}//GEN-LAST:event_jchkActiveKeyPressed

private void cetAP_Detail() throws CodeException {

    int row = jtbldetail.getSelectedRow();
    int col = jtbldetail.getSelectedColumn();


    Ap_distsetd add;
    if (row > obj.getAp_DistSetDs().size() - 1) {
        add = new Ap_distsetd();
        obj.getAp_DistSetDs().add(add);
    }else{
        add = (Ap_distsetd) obj.getAp_DistSetDs().list().get(row);
    }

    long iddetail = 0 ;
    try{
        iddetail = Long.parseLong(tmodel.getValueAt(row, 0)+"");
    }catch (Exception e){}

    add.setID(iddetail);
    add.setdistcode(tmodel.getValueAt(row, 1)+"");


    obj.replaceAp_SetD(row, add);

}

private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {                                            
    setToolBar(iformtype,istatus);
    mf.setIcon(CLASSNAME);
}                                           

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmAp_distseth().setVisible(true);
                } catch (CodeException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator HorizontalLine;
    private javax.swing.JLabel jHeader;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton jbtnBrowse;
    private javax.swing.JCheckBox jchkActive;
    private javax.swing.JLabel jlbldistsetcode;
    private javax.swing.JTable jtbldetail;
    private javax.swing.JTextField jtxtauditdate;
    private javax.swing.JTextField jtxtaudituser;
    private javax.swing.JTextField jtxtcmpnyid;
    private javax.swing.JTextField jtxtdistsetcode;
    private javax.swing.JTextField jtxtdscription;
    private javax.swing.JTextField jtxtentrydate;
    private javax.swing.JTextField jtxtid;
    // End of variables declaration//GEN-END:variables

 
    public void moveFirst() throws CodeException {
        obj.moveFirst();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void movePrevious() throws CodeException {
        obj.movePrevious();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void moveNext() throws CodeException {
        obj.moveNext();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void moveLast() throws CodeException {
        obj.moveLast();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void searchData() throws CodeException {
        obj = new Ap_distseth(this.jtxtdistsetcode.getText());
        showData();
        mf.setIcon(CLASSNAME);

    }
    public void newData() throws CodeException {
        obj = new Ap_distseth();
        istatus=1;
        showData();
        setToolBar(iformtype,istatus);
    }

    public void saveData() throws CodeException {
        istatus = 0;
        setData();
        obj.save();
        
        showData();
        
        mf.setIcon(CLASSNAME);
    }

    public void showData() throws CodeException {
        setCursor(GlobalUtils.HOURGLASSCURSOR);
	
             jtxtid.setText(obj.toString(Ap_distseth.PROPERTY_ID));
             jtxtdistsetcode.setText(obj.toString(Ap_distseth.PROPERTY_DISTSETCODE));
             jchkActive.setSelected(obj.getactive() == 1);
             jtxtdscription.setText(obj.toString(Ap_distseth.PROPERTY_DSCRIPTION));
             jtxtentrydate.setText(obj.toString(Ap_distseth.PROPERTY_ENTRYDATE));
             jtxtauditdate.setText(obj.toString(Ap_distseth.PROPERTY_AUDITDATE));
             jtxtaudituser.setText(obj.toString(Ap_distseth.PROPERTY_AUDITUSER));
             jtxtcmpnyid.setText(obj.toString(Ap_distseth.PROPERTY_CMPNYID));

             showAP_DistSetD();

             
        setCursor(GlobalUtils.NORMALCURSOR);
    }

    private void showAP_DistSetD() throws CodeException {

        GlobalModel.clearRow(tmodel);


        for(Object o : obj.getAp_DistSetDs().list()) {
            Ap_distsetd add = (Ap_distsetd) o;

            tmodel.addRow(data);
            tmodel.setValueAt(add.getID(), tmodel.getRowCount() - 1, 0);
            tmodel.setValueAt(add.getdistcode(), tmodel.getRowCount() - 1, 1);
            tmodel.setValueAt(add.getAp_DistDesc() ==null?"":add.getAp_DistDesc(), tmodel.getRowCount() - 1, 2);
            tmodel.setValueAt(add.getAp_DistGL()==null?"":add.getAp_DistGL(), tmodel.getRowCount() - 1, 3);
        }
        tmodel.addRow(data);
        tmodel.setValueAt("0", tmodel.getRowCount() - 1, 0);
        GlobalUtils.selectCellTable(jtbldetail, 0, 1);
    }


    public void delete() throws CodeException {
        obj.delete();
        obj.moveFirst();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void setToolBar(int iFormType, int istatus) {
        mf.setToolBar(iformtype,istatus);        
    }

    public void setData() throws CodeException {
        
	
          obj.fromString(Ap_distseth.PROPERTY_ID, jtxtid.getText()) ;
          obj.fromString(Ap_distseth.PROPERTY_DISTSETCODE, jtxtdistsetcode.getText()) ;
          obj.setactive(jchkActive.isSelected()?1:0);
          obj.fromString(Ap_distseth.PROPERTY_DSCRIPTION, jtxtdscription.getText()) ;
          obj.fromString(Ap_distseth.PROPERTY_ENTRYDATE, jtxtentrydate.getText()) ;
          obj.fromString(Ap_distseth.PROPERTY_AUDITDATE, jtxtauditdate.getText()) ;
          obj.fromString(Ap_distseth.PROPERTY_AUDITUSER, jtxtaudituser.getText()) ;
          obj.fromString(Ap_distseth.PROPERTY_CMPNYID, jtxtcmpnyid.getText()) ;

    }

    public void undo() throws CodeException {
        istatus = 0;
        moveFirst();
        showData();
    }

    public void execute() throws CodeException {
       saveData();
    }

    public void printData() throws CodeException {
        FrmPrintMasterAPDistributionSetCode fprint = new FrmPrintMasterAPDistributionSetCode();
        fprint.jtxtDistCode.setText(jtxtdistsetcode.getText());
        fprint.setVisible(true);
    }

    public void importCsv() throws CodeException {
            
        String file1 = "";
        String file2 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".csv";   
        
        JFileChooser chooser = new JFileChooser(".");
        chooser.setDialogTitle("Pilih File ");
        FileFilter filter1 = new ExtFileChooserFilter("CSV", new String[] { "CSV"});
        chooser.setFileFilter(filter1);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            
            try {
                file1 = selectedFile.getCanonicalPath();
            
            }catch (Exception e) {}

            GlobalUtils.copyfile(file1, file2 );                

            obj.importCsv();
            
        }else {
          JOptionPane.showMessageDialog(null,"No Selection ");
        }

    }

    public void exportCsv() throws CodeException {
        
    
        if (obj.exportCsv()) {
            
            String file1 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".csv";   
            String file2 = "";
            
            JFileChooser chooser = new JFileChooser(".");
            chooser.setDialogTitle("Pilih Directory ");
    
            if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                try {
                    file2 = chooser.getSelectedFile().getCanonicalPath() + ".csv";
                        
                    JOptionPane.showMessageDialog(null, GlobalUtils.copyfile(file1, file2 ));                    
                    
                }catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());                    
                }
                
            }else {
              JOptionPane.showMessageDialog(null,"No Selection ");
            }
    
        }
        
    }

    public void importText() throws CodeException {
        String file1 = "";
        String file2 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".txt";   
        
        JFileChooser chooser = new JFileChooser(".");
        chooser.setDialogTitle("Pilih File ");
        FileFilter filter1 = new ExtFileChooserFilter("txt", new String[] { "txt"});
        chooser.setFileFilter(filter1);


        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            
            try {
                file1 = selectedFile.getCanonicalPath();
            
            }catch (Exception e) {}

            GlobalUtils.copyfile(file1, file2 );                

            obj.importCsv();
            
        }else {
          JOptionPane.showMessageDialog(null,"No Selection ");
        }
    }

    public void exportText() throws CodeException {
        if (obj.exportText()) {
            
            String file1 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".txt";   
            String file2 = "";
            
            JFileChooser chooser = new JFileChooser(".");
            chooser.setDialogTitle("Pilih Directory ");
    
            if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                try {
                    file2 = chooser.getSelectedFile().getCanonicalPath() + ".txt";                        
                    JOptionPane.showMessageDialog(null, GlobalUtils.copyfile(file1, file2 ));                    
                    
                }catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());                    
                }
                
            }else {
              JOptionPane.showMessageDialog(null,"No Selection ");
            }
    
        } 
    }

    
}
