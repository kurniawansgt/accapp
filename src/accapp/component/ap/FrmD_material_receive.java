/*
 * From Template
 *
 * Created on June 29, 2007, 2:00 PM
 * 
 * 
 * How to Call this Form on FrmMainFrame
 * Sample : 
 *    
 * import H_Material_Receive.FrmD_material_receive;
 * 
 * .......
 * 
 * 
 * FrmD_material_receive frmD_material_receive;
 * 
 * .......
 * 
 try {
        if (frmD_material_receive == null) {
            frmmD_material_receive = new FrmD_material_receive(this);
        }
        
        showForm(frmD_material_receive);
        
    }catch(Exception e) {
        e.printStackTrace();
    }
 * 
 */

package accapp.component.ap;

import common.component.FrmBrowse;
import common.classinterface.NavigatorFormInt;
import common.classinterface.NavigatorObjectInt;
import common.component.FrmMainFrame;

import common.utils.CodeException;
import common.utils.GlobalUtils;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import common.utils.ExtFileChooserFilter;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import accapp.objectclasses.ap.D_material_receive;
import accapp.objectclasses.ap.D_material_receives;

/**
 *
 * @author  Generator
 */

public class FrmD_material_receive extends javax.swing.JInternalFrame implements NavigatorFormInt {

    private static int istatus = 0;
    private static int iformtype = 0;
    public static String CLASSNAME="FrmD_material_receive";
    
    FrmMainFrame mf ;
    
    
    public D_material_receive obj = new D_material_receive();
    
   
    /** Creates new form Area */
    public FrmD_material_receive() throws CodeException {
        initComponents();
    }
    
    public FrmD_material_receive(FrmMainFrame mf) throws CodeException{
        this.mf = mf;
        initComponents();
    }
     
       
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jHeader = new javax.swing.JLabel();
        HorizontalLine = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jbtnBrowse = new javax.swing.JButton();
        jlblid = new javax.swing.JLabel();
        jtxtid = new javax.swing.JTextField();
        jlblno_mr = new javax.swing.JLabel();
        jtxtno_mr = new javax.swing.JTextField();
        jlblid_detail_pp = new javax.swing.JLabel();
        jtxtid_detail_pp = new javax.swing.JTextField();
        jlblkode_beban = new javax.swing.JLabel();
        jtxtkode_beban = new javax.swing.JTextField();
        jlblitemDesc = new javax.swing.JLabel();
        jtxtitemDesc = new javax.swing.JTextField();
        jlblprice = new javax.swing.JLabel();
        jtxtprice = new javax.swing.JTextField();
        jlblqtyOrder = new javax.swing.JLabel();
        jtxtqtyOrder = new javax.swing.JTextField();
        jlblqtyReceive = new javax.swing.JLabel();
        jtxtqtyReceive = new javax.swing.JTextField();
        jlblentrytime = new javax.swing.JLabel();
        jtxtentrytime = new javax.swing.JTextField();
        jlblentryuser = new javax.swing.JLabel();
        jtxtentryuser = new javax.swing.JTextField();
        jlblupdatetime = new javax.swing.JLabel();
        jtxtupdatetime = new javax.swing.JTextField();
        jlblupdateuser = new javax.swing.JLabel();
        jtxtupdateuser = new javax.swing.JTextField();
        jlblipaddress = new javax.swing.JLabel();
        jtxtipaddress = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("D_material_receive");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jHeader.setBackground(new java.awt.Color(102, 102, 102));
        jHeader.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jHeader.setForeground(new java.awt.Color(255, 255, 255));
        jHeader.setText(" : : D_material_receive");
        jHeader.setAlignmentY(0.0F);
        jHeader.setOpaque(true);
        getContentPane().add(jHeader);
        jHeader.setBounds(30, 30, 130, 20);

        HorizontalLine.setForeground(new java.awt.Color(102, 102, 102));
        HorizontalLine.setAlignmentX(0.0F);
        HorizontalLine.setAlignmentY(0.0F);
        getContentPane().add(HorizontalLine);
        HorizontalLine.setBounds(160, 50, 650, 2);

        jSeparator3.setForeground(new java.awt.Color(102, 102, 102));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setAlignmentX(0.0F);
        jSeparator3.setAlignmentY(0.0F);
        getContentPane().add(jSeparator3);
        jSeparator3.setBounds(30, 50, 2, 400);

        jbtnBrowse.setText("...");
        jbtnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBrowseActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnBrowse);
        jbtnBrowse.setBounds(430, 80, 30, 17);

        jlblid.setText("id");
        getContentPane().add(jlblid);
        jlblid.setBounds(70, 80, 140, 14);

        jtxtid.setText("id");
        getContentPane().add(jtxtid);
        jtxtid.setBounds(260, 80, 80, 20);

        jlblno_mr.setText("no_mr");
        getContentPane().add(jlblno_mr);
        jlblno_mr.setBounds(70, 100, 140, 14);

        jtxtno_mr.setText("no_mr");
        getContentPane().add(jtxtno_mr);
        jtxtno_mr.setBounds(260, 100, 80, 20);

        jlblid_detail_pp.setText("id_detail_pp");
        getContentPane().add(jlblid_detail_pp);
        jlblid_detail_pp.setBounds(70, 120, 140, 14);

        jtxtid_detail_pp.setText("id_detail_pp");
        getContentPane().add(jtxtid_detail_pp);
        jtxtid_detail_pp.setBounds(260, 120, 80, 20);

        jlblkode_beban.setText("kode_beban");
        getContentPane().add(jlblkode_beban);
        jlblkode_beban.setBounds(70, 140, 140, 14);

        jtxtkode_beban.setText("kode_beban");
        getContentPane().add(jtxtkode_beban);
        jtxtkode_beban.setBounds(260, 140, 80, 20);

        jlblitemDesc.setText("itemDesc");
        getContentPane().add(jlblitemDesc);
        jlblitemDesc.setBounds(70, 160, 140, 14);

        jtxtitemDesc.setText("itemDesc");
        getContentPane().add(jtxtitemDesc);
        jtxtitemDesc.setBounds(260, 160, 80, 20);

        jlblprice.setText("price");
        getContentPane().add(jlblprice);
        jlblprice.setBounds(70, 180, 140, 14);

        jtxtprice.setText("price");
        getContentPane().add(jtxtprice);
        jtxtprice.setBounds(260, 180, 80, 20);

        jlblqtyOrder.setText("qtyOrder");
        getContentPane().add(jlblqtyOrder);
        jlblqtyOrder.setBounds(70, 200, 140, 14);

        jtxtqtyOrder.setText("qtyOrder");
        getContentPane().add(jtxtqtyOrder);
        jtxtqtyOrder.setBounds(260, 200, 80, 20);

        jlblqtyReceive.setText("qtyReceive");
        getContentPane().add(jlblqtyReceive);
        jlblqtyReceive.setBounds(70, 220, 140, 14);

        jtxtqtyReceive.setText("qtyReceive");
        getContentPane().add(jtxtqtyReceive);
        jtxtqtyReceive.setBounds(260, 220, 80, 20);

        jlblentrytime.setText("entrytime");
        getContentPane().add(jlblentrytime);
        jlblentrytime.setBounds(70, 240, 140, 14);

        jtxtentrytime.setText("entrytime");
        getContentPane().add(jtxtentrytime);
        jtxtentrytime.setBounds(260, 240, 80, 20);

        jlblentryuser.setText("entryuser");
        getContentPane().add(jlblentryuser);
        jlblentryuser.setBounds(70, 260, 140, 14);

        jtxtentryuser.setText("entryuser");
        getContentPane().add(jtxtentryuser);
        jtxtentryuser.setBounds(260, 260, 80, 20);

        jlblupdatetime.setText("updatetime");
        getContentPane().add(jlblupdatetime);
        jlblupdatetime.setBounds(70, 280, 140, 14);

        jtxtupdatetime.setText("updatetime");
        getContentPane().add(jtxtupdatetime);
        jtxtupdatetime.setBounds(260, 280, 80, 20);

        jlblupdateuser.setText("updateuser");
        getContentPane().add(jlblupdateuser);
        jlblupdateuser.setBounds(70, 300, 140, 14);

        jtxtupdateuser.setText("updateuser");
        getContentPane().add(jtxtupdateuser);
        jtxtupdateuser.setBounds(260, 300, 80, 20);

        jlblipaddress.setText("ipaddress");
        getContentPane().add(jlblipaddress);
        jlblipaddress.setBounds(70, 320, 140, 14);

        jtxtipaddress.setText("ipaddress");
        getContentPane().add(jtxtipaddress);
        jtxtipaddress.setBounds(260, 320, 80, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
         try {
            moveFirst();

         } catch (CodeException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formInternalFrameOpened

private void kdatePurchaseDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kdatePurchaseDateFocusLost

}//GEN-LAST:event_kdatePurchaseDateFocusLost

private void kdatePurchaseDateCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_kdatePurchaseDateCaretPositionChanged

}//GEN-LAST:event_kdatePurchaseDateCaretPositionChanged

private void kdatePurchaseDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_kdatePurchaseDatePropertyChange

}//GEN-LAST:event_kdatePurchaseDatePropertyChange


private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {                                            
    setToolBar(iformtype,istatus);
    mf.setIcon(CLASSNAME);
}                                           

private void jbtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {                                           
      try {
	      D_material_receives brs = new D_material_receives();
	      FrmBrowse bd = new FrmBrowse(this, brs);
	      bd.setFirstValue(jtxtid);
	      bd.setModal(true);
	      bd.setVisible(true);            
	      
	  } catch (CodeException ex) {
	      ex.printStackTrace();
	  }
}                                                                                 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmD_material_receive().setVisible(true);
                } catch (CodeException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator HorizontalLine;
    private javax.swing.JLabel jHeader;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton jbtnBrowse;
    private javax.swing.JLabel jlblentrytime;
    private javax.swing.JLabel jlblentryuser;
    private javax.swing.JLabel jlblid;
    private javax.swing.JLabel jlblid_detail_pp;
    private javax.swing.JLabel jlblipaddress;
    private javax.swing.JLabel jlblitemDesc;
    private javax.swing.JLabel jlblkode_beban;
    private javax.swing.JLabel jlblno_mr;
    private javax.swing.JLabel jlblprice;
    private javax.swing.JLabel jlblqtyOrder;
    private javax.swing.JLabel jlblqtyReceive;
    private javax.swing.JLabel jlblupdatetime;
    private javax.swing.JLabel jlblupdateuser;
    private javax.swing.JTextField jtxtentrytime;
    private javax.swing.JTextField jtxtentryuser;
    private javax.swing.JTextField jtxtid;
    private javax.swing.JTextField jtxtid_detail_pp;
    private javax.swing.JTextField jtxtipaddress;
    private javax.swing.JTextField jtxtitemDesc;
    private javax.swing.JTextField jtxtkode_beban;
    private javax.swing.JTextField jtxtno_mr;
    private javax.swing.JTextField jtxtprice;
    private javax.swing.JTextField jtxtqtyOrder;
    private javax.swing.JTextField jtxtqtyReceive;
    private javax.swing.JTextField jtxtupdatetime;
    private javax.swing.JTextField jtxtupdateuser;
    // End of variables declaration//GEN-END:variables

 
    public void moveFirst() throws CodeException {
        obj.moveFirst();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void movePrevious() throws CodeException {
        obj.movePrevious();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void moveNext() throws CodeException {
        obj.moveNext();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void moveLast() throws CodeException {
        obj.moveLast();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void searchData() throws CodeException {
        obj = new D_material_receive(this.jtxtid.getText());
        showData();
        mf.setIcon(CLASSNAME);

    }
    public void newData() throws CodeException {
        obj = new D_material_receive();
        istatus=1;
        showData();
        setToolBar(iformtype,istatus);
    }

    public void saveData() throws CodeException {
        istatus = 0;
        setData();
        obj.save();
        
        showData();
        
        mf.setIcon(CLASSNAME);
    }

    public void showData() throws CodeException {
        setCursor(GlobalUtils.HOURGLASSCURSOR);
	
             jtxtid.setText(obj.toString(D_material_receive.PROPERTY_ID));
             jtxtno_mr.setText(obj.toString(D_material_receive.PROPERTY_NO_MR));
             jtxtid_detail_pp.setText(obj.toString(D_material_receive.PROPERTY_ID_DETAIL_PP));
             jtxtkode_beban.setText(obj.toString(D_material_receive.PROPERTY_KODE_BEBAN));
             jtxtitemDesc.setText(obj.toString(D_material_receive.PROPERTY_ITEMDESC));
             jtxtprice.setText(obj.toString(D_material_receive.PROPERTY_PRICE));
             jtxtqtyOrder.setText(obj.toString(D_material_receive.PROPERTY_QTYORDER));
             jtxtqtyReceive.setText(obj.toString(D_material_receive.PROPERTY_QTYRECEIVE));
             jtxtentrytime.setText(obj.toString(D_material_receive.PROPERTY_ENTRYTIME));
             jtxtentryuser.setText(obj.toString(D_material_receive.PROPERTY_ENTRYUSER));
             jtxtupdatetime.setText(obj.toString(D_material_receive.PROPERTY_UPDATETIME));
             jtxtupdateuser.setText(obj.toString(D_material_receive.PROPERTY_UPDATEUSER));
             jtxtipaddress.setText(obj.toString(D_material_receive.PROPERTY_IPADDRESS));
        setCursor(GlobalUtils.NORMALCURSOR);
    }

    public void delete() throws CodeException {
        obj.delete();
        obj.moveFirst();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void setToolBar(int iFormType, int istatus) {
        mf.setToolBar(iformtype,istatus);        
    }

    public void setData() throws CodeException {
        
	
          obj.fromString(D_material_receive.PROPERTY_ID, jtxtid.getText()) ;
          obj.fromString(D_material_receive.PROPERTY_NO_MR, jtxtno_mr.getText()) ;
          obj.fromString(D_material_receive.PROPERTY_ID_DETAIL_PP, jtxtid_detail_pp.getText()) ;
          obj.fromString(D_material_receive.PROPERTY_KODE_BEBAN, jtxtkode_beban.getText()) ;
          obj.fromString(D_material_receive.PROPERTY_ITEMDESC, jtxtitemDesc.getText()) ;
          obj.fromString(D_material_receive.PROPERTY_PRICE, jtxtprice.getText()) ;
          obj.fromString(D_material_receive.PROPERTY_QTYORDER, jtxtqtyOrder.getText()) ;
          obj.fromString(D_material_receive.PROPERTY_QTYRECEIVE, jtxtqtyReceive.getText()) ;
          obj.fromString(D_material_receive.PROPERTY_ENTRYTIME, jtxtentrytime.getText()) ;
          obj.fromString(D_material_receive.PROPERTY_ENTRYUSER, jtxtentryuser.getText()) ;
          obj.fromString(D_material_receive.PROPERTY_UPDATETIME, jtxtupdatetime.getText()) ;
          obj.fromString(D_material_receive.PROPERTY_UPDATEUSER, jtxtupdateuser.getText()) ;
          obj.fromString(D_material_receive.PROPERTY_IPADDRESS, jtxtipaddress.getText()) ;

    }

    public void undo() throws CodeException {
        istatus = 0;
        moveFirst();
        showData();
    }

    public void execute() throws CodeException {
       saveData();
    }

    public void printData() throws CodeException {
        Map parameter = new HashMap();
        NavigatorObjectInt noi = (NavigatorObjectInt) obj;        
        String file   = GlobalUtils.getCurrentDir() +"/Reports/" + noi.getClassName() + ".jrxml";
        GlobalUtils.printReport(file,  false);    
    }

    public void importCsv() throws CodeException {
            
        String file1 = "";
        String file2 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".csv";   
        
        JFileChooser chooser = new JFileChooser(".");
        chooser.setDialogTitle("Pilih File ");
        FileFilter filter1 = new ExtFileChooserFilter("CSV", new String[] { "CSV"});
        chooser.setFileFilter(filter1);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            
            try {
                file1 = selectedFile.getCanonicalPath();
            
            }catch (Exception e) {}

            GlobalUtils.copyfile(file1, file2 );                

            obj.importCsv();
            
        }else {
          JOptionPane.showMessageDialog(null,"No Selection ");
        }

    }

    public void exportCsv() throws CodeException {
        
    
        if (obj.exportCsv()) {
            
            String file1 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".csv";   
            String file2 = "";
            
            JFileChooser chooser = new JFileChooser(".");
            chooser.setDialogTitle("Pilih Directory ");
    
            if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                try {
                    file2 = chooser.getSelectedFile().getCanonicalPath() + ".csv";
                        
                    JOptionPane.showMessageDialog(null, GlobalUtils.copyfile(file1, file2 ));                    
                    
                }catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());                    
                }
                
            }else {
              JOptionPane.showMessageDialog(null,"No Selection ");
            }
    
        }
        
    }

    public void importText() throws CodeException {
        String file1 = "";
        String file2 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".txt";   
        
        JFileChooser chooser = new JFileChooser(".");
        chooser.setDialogTitle("Pilih File ");
        FileFilter filter1 = new ExtFileChooserFilter("txt", new String[] { "txt"});
        chooser.setFileFilter(filter1);


        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            
            try {
                file1 = selectedFile.getCanonicalPath();
            
            }catch (Exception e) {}

            GlobalUtils.copyfile(file1, file2 );                

            obj.importCsv();
            
        }else {
          JOptionPane.showMessageDialog(null,"No Selection ");
        }
    }

    public void exportText() throws CodeException {
        if (obj.exportText()) {
            
            String file1 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".txt";   
            String file2 = "";
            
            JFileChooser chooser = new JFileChooser(".");
            chooser.setDialogTitle("Pilih Directory ");
    
            if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                try {
                    file2 = chooser.getSelectedFile().getCanonicalPath() + ".txt";                        
                    JOptionPane.showMessageDialog(null, GlobalUtils.copyfile(file1, file2 ));                    
                    
                }catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());                    
                }
                
            }else {
              JOptionPane.showMessageDialog(null,"No Selection ");
            }
    
        } 
    }

    
}
