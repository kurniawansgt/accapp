/*
 * From Template
 *
 * Created on June 29, 2007, 2:00 PM
 * 
 * 
 * How to Call this Form on FrmMainFrame
 * Sample : 
 *    
 * import test.FrmCb_distd;
 * 
 * .......
 * 
 * 
 * FrmCb_distd frmCb_distd;
 * 
 * .......
 * 
 try {
        if (frmCb_distd == null) {
            frmmCb_distd = new FrmCb_distd(this);
        }
        
        showForm(frmCb_distd);
        
    }catch(Exception e) {
        e.printStackTrace();
    }
 * 
 */

package accapp.component.cashbook;

import accapp.objectclasses.cashbook.Cb_bank;
import accapp.objectclasses.cashbook.Cb_banks;
import accapp.objectclasses.cashbook.Cb_batchcontrol;
import accapp.objectclasses.cashbook.Cb_pjh;
import accapp.objectclasses.cashbook.Cb_pjhs;
import accapp.objectclasses.gl.Gl_batchlist;
import accapp.objectclasses.gl.Gl_optiondetail1;
import common.component.FrmBrowse;
import common.classinterface.NavigatorFormInt;
import common.component.FrmMainFrame;

import common.utils.CodeException;
import common.utils.GlobalUtils;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import common.utils.ExtFileChooserFilter;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author  Generator
 */

public class FrmCb_batchGLposting extends javax.swing.JInternalFrame implements NavigatorFormInt {

    private static int istatus = 0;
    private static int iformtype = 1;
    public static String CLASSNAME="FrmCb_distd";
    
    FrmMainFrame mf ;
    
    
    
   
    /** Creates new form Area */
    public FrmCb_batchGLposting() throws CodeException {
        initComponents();
    }
    
    public FrmCb_batchGLposting(FrmMainFrame mf) throws CodeException{
        this.mf = mf;
        initComponents();
    }
     
       
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jHeader = new javax.swing.JLabel();
        HorizontalLine = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jbtnBrowse = new javax.swing.JButton();
        jlblid = new javax.swing.JLabel();
        jtxtid = new javax.swing.JTextField();
        jlbldistcode = new javax.swing.JLabel();
        jtxtdistcode = new javax.swing.JTextField();
        jbtnBrowse1 = new javax.swing.JButton();
        jlbldistcode1 = new javax.swing.JLabel();
        jlblid1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        kdateentrydate = new org.kazao.calendar.KazaoCalendarDate();
        kdateentrydate1 = new org.kazao.calendar.KazaoCalendarDate();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cash Book Transfer To G/L");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jHeader.setBackground(new java.awt.Color(102, 102, 102));
        jHeader.setFont(new java.awt.Font("Dialog", 1, 10));
        jHeader.setForeground(new java.awt.Color(255, 255, 255));
        jHeader.setText(" : : Cash Book Transfer To G/L");
        jHeader.setAlignmentY(0.0F);
        jHeader.setOpaque(true);
        getContentPane().add(jHeader);
        jHeader.setBounds(30, 30, 270, 20);

        HorizontalLine.setForeground(new java.awt.Color(102, 102, 102));
        HorizontalLine.setAlignmentX(0.0F);
        HorizontalLine.setAlignmentY(0.0F);
        getContentPane().add(HorizontalLine);
        HorizontalLine.setBounds(160, 50, 650, 2);

        jSeparator3.setForeground(new java.awt.Color(102, 102, 102));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setAlignmentX(0.0F);
        jSeparator3.setAlignmentY(0.0F);
        getContentPane().add(jSeparator3);
        jSeparator3.setBounds(30, 50, 2, 400);

        jbtnBrowse.setText("...");
        jbtnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBrowseActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnBrowse);
        jbtnBrowse.setBounds(670, 80, 30, 17);

        jlblid.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlblid.setText("Bank");
        getContentPane().add(jlblid);
        jlblid.setBounds(70, 80, 140, 14);

        jtxtid.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        getContentPane().add(jtxtid);
        jtxtid.setBounds(260, 80, 130, 20);

        jlbldistcode.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlbldistcode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbldistcode.setText("To");
        getContentPane().add(jlbldistcode);
        jlbldistcode.setBounds(540, 60, 160, 14);

        jtxtdistcode.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        getContentPane().add(jtxtdistcode);
        jtxtdistcode.setBounds(540, 80, 130, 20);

        jbtnBrowse1.setText("...");
        jbtnBrowse1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBrowse1ActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnBrowse1);
        jbtnBrowse1.setBounds(390, 80, 30, 17);

        jlbldistcode1.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlbldistcode1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbldistcode1.setText("From");
        getContentPane().add(jlbldistcode1);
        jlbldistcode1.setBounds(260, 60, 160, 14);

        jlblid1.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlblid1.setText("Date");
        getContentPane().add(jlblid1);
        jlblid1.setBounds(70, 110, 140, 14);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Reconcile Transaction on Posting"));
        jPanel1.setEnabled(false);
        jPanel1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jPanel1.setLayout(null);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jRadioButton1.setText("Zero Amount");
        jPanel1.add(jRadioButton1);
        jRadioButton1.setBounds(480, 30, 114, 23);

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jRadioButton2.setSelected(true);
        jRadioButton2.setText("None");
        jPanel1.add(jRadioButton2);
        jRadioButton2.setBounds(20, 30, 51, 23);

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jRadioButton3.setText("All");
        jPanel1.add(jRadioButton3);
        jRadioButton3.setBounds(240, 30, 114, 23);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(70, 140, 630, 70);

        kdateentrydate.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        kdateentrydate.setFontDate(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        getContentPane().add(kdateentrydate);
        kdateentrydate.setBounds(260, 110, 94, 19);

        kdateentrydate1.setFont(new java.awt.Font("Dialog", 0, 10));
        kdateentrydate1.setFontDate(new java.awt.Font("Dialog", 0, 10));
        getContentPane().add(kdateentrydate1);
        kdateentrydate1.setBounds(540, 110, 94, 19);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
         try {
            moveFirst();

         } catch (CodeException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formInternalFrameOpened

private void kdatePurchaseDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kdatePurchaseDateFocusLost

}//GEN-LAST:event_kdatePurchaseDateFocusLost

private void kdatePurchaseDateCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_kdatePurchaseDateCaretPositionChanged

}//GEN-LAST:event_kdatePurchaseDateCaretPositionChanged

private void kdatePurchaseDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_kdatePurchaseDatePropertyChange

}//GEN-LAST:event_kdatePurchaseDatePropertyChange

private void jbtnBrowse1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBrowse1ActionPerformed
    // TODO add your handling code here:
    try {
          Cb_banks brs = new Cb_banks();
          FrmBrowse bd = new FrmBrowse(this, brs);
          bd.setFirstValue(jtxtid);
          bd.setModal(true);
          bd.setVisible(true);

      } catch (CodeException ex) {
          ex.printStackTrace();
      }
}//GEN-LAST:event_jbtnBrowse1ActionPerformed


private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {                                            
    setToolBar(iformtype,istatus);
    mf.setIcon(CLASSNAME);
}                                           

private void jbtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {                                           
      try {
	      Cb_banks brs = new Cb_banks();
	      FrmBrowse bd = new FrmBrowse(this, brs);
	      bd.setFirstValue(jtxtdistcode);
	      bd.setModal(true);
	      bd.setVisible(true);            
	      
	  } catch (CodeException ex) {
	      ex.printStackTrace();
	  }
}                                                                                 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmCb_batchGLposting().setVisible(true);
                } catch (CodeException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator HorizontalLine;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jHeader;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton jbtnBrowse;
    private javax.swing.JButton jbtnBrowse1;
    private javax.swing.JLabel jlbldistcode;
    private javax.swing.JLabel jlbldistcode1;
    private javax.swing.JLabel jlblid;
    private javax.swing.JLabel jlblid1;
    private javax.swing.JTextField jtxtdistcode;
    private javax.swing.JTextField jtxtid;
    private org.kazao.calendar.KazaoCalendarDate kdateentrydate;
    private org.kazao.calendar.KazaoCalendarDate kdateentrydate1;
    // End of variables declaration//GEN-END:variables

 
    public void moveFirst() throws CodeException {
        //obj.moveFirst();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void movePrevious() throws CodeException {
        //obj.movePrevious();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void moveNext() throws CodeException {
        //obj.moveNext();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void moveLast() throws CodeException {
        //obj.moveLast();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void searchData() throws CodeException {
        //obj = new Cb_distd(this.jtxtid.getText());
        showData();
        mf.setIcon(CLASSNAME);

    }
    public void newData() throws CodeException {
        //obj = new Cb_distd();
        istatus=1;
        showData();
        setToolBar(iformtype,istatus);
    }

    public void saveData() throws CodeException {
        istatus = 0;

         Cb_batchcontrol obj=new Cb_batchcontrol();
        if (obj.checkCBPostingToGLSP(jtxtid.getText(),jtxtdistcode.getText(),GlobalUtils.formatDate(kdateentrydate.getDate(),"yyyy-MM-dd"),GlobalUtils.formatDate(kdateentrydate1.getDate(),"yyyy-MM-dd"))){

            if (obj.runCBPostingToGLSP(jtxtid.getText(),jtxtdistcode.getText(),GlobalUtils.formatDate(kdateentrydate.getDate(),"yyyy-MM-dd"),GlobalUtils.formatDate(kdateentrydate1.getDate(),"yyyy-MM-dd"))){
                JOptionPane.showMessageDialog(this, "Posting Complete");
                showData();
            } else {
                JOptionPane.showMessageDialog(this, "Posting Cancel, No Data Available");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Posting Cancel, Selected Data Not Available");
        }
        mf.setIcon(CLASSNAME);
    }

    public void showData() throws CodeException {
        setCursor(GlobalUtils.HOURGLASSCURSOR);
	
             //jtxtid.setText(obj.toString(Cb_distd.PROPERTY_ID));
             //jtxtdistcode.setText(obj.toString(Cb_distd.PROPERTY_DISTCODE));
             
        setCursor(GlobalUtils.NORMALCURSOR);
    }

    public void delete() throws CodeException {
        //obj.delete();
        //obj.moveFirst();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void setToolBar(int iFormType, int istatus) {
        mf.setToolBar(iformtype,istatus);        
    }

    public void setData() throws CodeException {
        
	
          //obj.fromString(Cb_distd.PROPERTY_ID, jtxtid.getText()) ;
          //obj.fromString(Cb_distd.PROPERTY_DISTCODE, jtxtdistcode.getText()) ;
          

    }

    public void undo() throws CodeException {
        istatus = 0;
        moveFirst();
        showData();
    }

    public void execute() throws CodeException {
       saveData();
    }

    public void printData() throws CodeException {
        Map parameter = new HashMap();
        //NavigatorObjectInt noi = (NavigatorObjectInt) obj;
        //String file   = GlobalUtils.getCurrentDir() +"/Reports/" + noi.getClassName() + ".jrxml";
        //GlobalUtils.printReport(file,  false);
    }

    public void importCsv() throws CodeException {
            
        String file1 = "";
        //String file2 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".csv";
        
        JFileChooser chooser = new JFileChooser(".");
        chooser.setDialogTitle("Pilih File ");
        FileFilter filter1 = new ExtFileChooserFilter("CSV", new String[] { "CSV"});
        chooser.setFileFilter(filter1);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            
            try {
                file1 = selectedFile.getCanonicalPath();
            
            }catch (Exception e) {}

            //GlobalUtils.copyfile(file1, file2 );

            //obj.importCsv();
            
        }else {
          JOptionPane.showMessageDialog(null,"No Selection ");
        }

    }

    public void exportCsv() throws CodeException {
        
    
        /*if (obj.exportCsv()) {
            
            String file1 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".csv";   
            String file2 = "";
            
            JFileChooser chooser = new JFileChooser(".");
            chooser.setDialogTitle("Pilih Directory ");
    
            if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                try {
                    file2 = chooser.getSelectedFile().getCanonicalPath() + ".csv";
                        
                    JOptionPane.showMessageDialog(null, GlobalUtils.copyfile(file1, file2 ));                    
                    
                }catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());                    
                }
                
            }else {
              JOptionPane.showMessageDialog(null,"No Selection ");
            }
    
        }*/
        
    }

    public void importText() throws CodeException {
        String file1 = "";
        //String file2 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".txt";
        
        JFileChooser chooser = new JFileChooser(".");
        chooser.setDialogTitle("Pilih File ");
        FileFilter filter1 = new ExtFileChooserFilter("txt", new String[] { "txt"});
        chooser.setFileFilter(filter1);


        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            
            try {
                file1 = selectedFile.getCanonicalPath();
            
            }catch (Exception e) {}

            ////GlobalUtils.copyfile(file1, file2 );

            //obj.importCsv();
            
        }else {
          JOptionPane.showMessageDialog(null,"No Selection ");
        }
    }

    public void exportText() throws CodeException {
        /*if (obj.exportText()) {
            
            String file1 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".txt";   
            String file2 = "";
            
            JFileChooser chooser = new JFileChooser(".");
            chooser.setDialogTitle("Pilih Directory ");
    
            if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                try {
                    file2 = chooser.getSelectedFile().getCanonicalPath() + ".txt";                        
                    JOptionPane.showMessageDialog(null, GlobalUtils.copyfile(file1, file2 ));                    
                    
                }catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());                    
                }
                
            }else {
              JOptionPane.showMessageDialog(null,"No Selection ");
            }
    
        } */
    }

    
}
