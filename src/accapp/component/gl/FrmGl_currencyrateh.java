/*
 * From Template
 *
 * Created on June 29, 2007, 2:00 PM
 * 
 * 
 * How to Call this Form on FrmMainFrame
 * Sample : 
 *    
 * import test.FrmGl_currencyrateh;
 * 
 * .......
 * 
 * 
 * FrmGl_currencyrateh frmGl_currencyrateh;
 * 
 * .......
 * 
 try {
        if (frmGl_currencyrateh == null) {
            frmmGl_currencyrateh = new FrmGl_currencyrateh(this);
        }
        
        showForm(frmGl_currencyrateh);
        
    }catch(Exception e) {
        e.printStackTrace();
    }
 * 
 */

package accapp.component.gl;

import accapp.objectclasses.gl.Gl_currency;
import accapp.objectclasses.gl.Gl_currencyrated;
import accapp.objectclasses.gl.Gl_currencyrateds;
import accapp.objectclasses.gl.Gl_currencyrateh;
import accapp.objectclasses.gl.Gl_currencyratehs;
import accapp.objectclasses.gl.Gl_currencys;
import accapp.objectclasses.gl.Gl_ratetype;
import accapp.objectclasses.gl.Gl_ratetypes;
import common.component.FrmBrowse;
import common.classinterface.NavigatorFormInt;
import common.classinterface.NavigatorObjectInt;
import common.component.FrmMainFrame;
import common.tablemodels.GlobalModel;

import common.utils.CodeException;
import common.utils.GlobalUtils;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import common.utils.ExtFileChooserFilter;
import common.utils.selectallJTable;
import java.awt.event.KeyEvent;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author  Generator
 */

public class FrmGl_currencyrateh extends javax.swing.JInternalFrame implements NavigatorFormInt {

    private static int istatus = 0;
    private static int iformtype = 0;
    public static String CLASSNAME="FrmGl_currencyrateh";
    
    FrmMainFrame mf ;
    Object[] datadetail;
    DefaultTableModel tmodeldetail;
    
    public Gl_currencyrateh obj = new Gl_currencyrateh();
    Gl_currencyrated cbhh = new Gl_currencyrated();
    Gl_currencyrateds cbhds = new Gl_currencyrateds();

    int posttable = 0;
   
    /** Creates new form Area */
    public FrmGl_currencyrateh() throws CodeException {
        initComponents();
    }
    
    public FrmGl_currencyrateh(FrmMainFrame mf) throws CodeException{
        this.mf = mf;
        initComponents();

        datadetail = new Object[jtblDetail.getRowCount()];
        tmodeldetail = (DefaultTableModel) jtblDetail.getModel();

        jtxtid.setBounds(180, 30, 80, 20);
        jtxtentrydate.setBounds(260, 30, 160, 20);
        jtxtauditdate.setBounds(420, 30, 140, 20);
        jtxtaudituser.setBounds(560, 30, 110, 20);
        jtxtcmpnyid.setBounds(670, 30, 120, 20);

        jtxtid.setEditable(false);
        jtxtentrydate.setEditable(false);
        jtxtauditdate.setEditable(false);
        jtxtaudituser.setEditable(false);
        jtxtcmpnyid.setEditable(false);
    }
     
       
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jHeader = new javax.swing.JLabel();
        HorizontalLine = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jtxtid = new javax.swing.JTextField();
        jtxtentrydate = new javax.swing.JTextField();
        jtxtauditdate = new javax.swing.JTextField();
        jtxtaudituser = new javax.swing.JTextField();
        jtxtobjtype = new javax.swing.JTextField();
        jtxtcmpnyid = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jbtnBrowse = new javax.swing.JButton();
        jlblhomecur = new javax.swing.JLabel();
        jtxthomecur = new javax.swing.JTextField();
        jlblratetype = new javax.swing.JLabel();
        jtxtratetype = new javax.swing.JTextField();
        jlbldscription = new javax.swing.JLabel();
        jtxtdscription = new javax.swing.JTextField();
        jlbldatematch = new javax.swing.JLabel();
        jlblrateoper = new javax.swing.JLabel();
        jlblratesrce = new javax.swing.JLabel();
        jtxtratesrce = new javax.swing.JTextField();
        jcmbdatematch = new javax.swing.JComboBox();
        jcmbrateoper = new javax.swing.JComboBox();
        jtxthomecurdsc = new javax.swing.JTextField();
        jtxtratetypedsc = new javax.swing.JTextField();
        jlblratesrce1 = new javax.swing.JLabel();
        HorizontalLine1 = new javax.swing.JSeparator();
        jtxtCurrencyRate = new javax.swing.JTextField();
        jbtnBrowseBank1 = new javax.swing.JButton();
        jtxtCurrencyRateDsc = new javax.swing.JTextField();
        jbtnBrowseBank2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblDetail = new selectallJTable(tmodeldetail);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Master Currency Rate");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jHeader.setBackground(new java.awt.Color(102, 102, 102));
        jHeader.setFont(new java.awt.Font("Dialog", 1, 10));
        jHeader.setForeground(new java.awt.Color(255, 255, 255));
        jHeader.setText(" : : Master Currency Rate");
        jHeader.setAlignmentY(0.0F);
        jHeader.setOpaque(true);
        getContentPane().add(jHeader);
        jHeader.setBounds(30, 30, 130, 20);

        HorizontalLine.setForeground(new java.awt.Color(102, 102, 102));
        HorizontalLine.setAlignmentX(0.0F);
        HorizontalLine.setAlignmentY(0.0F);
        getContentPane().add(HorizontalLine);
        HorizontalLine.setBounds(160, 50, 650, 2);

        jSeparator3.setForeground(new java.awt.Color(102, 102, 102));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setAlignmentX(0.0F);
        jSeparator3.setAlignmentY(0.0F);
        getContentPane().add(jSeparator3);
        jSeparator3.setBounds(30, 50, 2, 400);

        jtxtid.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtid.setText("id");
        getContentPane().add(jtxtid);
        jtxtid.setBounds(260, 30, 80, 16);

        jtxtentrydate.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtentrydate.setText("entrydate");
        getContentPane().add(jtxtentrydate);
        jtxtentrydate.setBounds(340, 30, 80, 16);

        jtxtauditdate.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtauditdate.setText("auditdate");
        getContentPane().add(jtxtauditdate);
        jtxtauditdate.setBounds(420, 30, 80, 16);

        jtxtaudituser.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtaudituser.setText("audituser");
        getContentPane().add(jtxtaudituser);
        jtxtaudituser.setBounds(500, 30, 80, 16);

        jtxtobjtype.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtobjtype.setText("objtype");
        getContentPane().add(jtxtobjtype);
        jtxtobjtype.setBounds(580, 30, 80, 16);

        jtxtcmpnyid.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jtxtcmpnyid.setText("cmpnyid");
        getContentPane().add(jtxtcmpnyid);
        jtxtcmpnyid.setBounds(660, 30, 80, 16);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel1.setLayout(null);

        jbtnBrowse.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jbtnBrowse.setText("...");
        jbtnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBrowseActionPerformed(evt);
            }
        });
        jPanel1.add(jbtnBrowse);
        jbtnBrowse.setBounds(290, 20, 30, 17);

        jlblhomecur.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlblhomecur.setText("Function Currency");
        jPanel1.add(jlblhomecur);
        jlblhomecur.setBounds(20, 20, 140, 14);

        jtxthomecur.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxthomecur.setText("homecur");
        jPanel1.add(jtxthomecur);
        jtxthomecur.setBounds(210, 20, 80, 20);

        jlblratetype.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlblratetype.setText("Rate Type");
        jPanel1.add(jlblratetype);
        jlblratetype.setBounds(20, 50, 140, 14);

        jtxtratetype.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxtratetype.setText("ratetype");
        jPanel1.add(jtxtratetype);
        jtxtratetype.setBounds(210, 50, 80, 20);

        jlbldscription.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlbldscription.setText("Description");
        jPanel1.add(jlbldscription);
        jlbldscription.setBounds(20, 80, 140, 14);

        jtxtdscription.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxtdscription.setText("dscription");
        jPanel1.add(jtxtdscription);
        jtxtdscription.setBounds(210, 80, 460, 20);

        jlbldatematch.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlbldatematch.setText("Date Match");
        jPanel1.add(jlbldatematch);
        jlbldatematch.setBounds(20, 110, 140, 14);

        jlblrateoper.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlblrateoper.setText("Rate Operation");
        jPanel1.add(jlblrateoper);
        jlblrateoper.setBounds(20, 140, 140, 14);

        jlblratesrce.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlblratesrce.setText("Currency Table");
        jPanel1.add(jlblratesrce);
        jlblratesrce.setBounds(20, 210, 140, 14);

        jtxtratesrce.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxtratesrce.setText("ratesrce");
        jPanel1.add(jtxtratesrce);
        jtxtratesrce.setBounds(210, 170, 460, 20);

        jcmbdatematch.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jcmbdatematch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Exact", "Later", "Earlier" }));
        jPanel1.add(jcmbdatematch);
        jcmbdatematch.setBounds(210, 110, 100, 22);

        jcmbrateoper.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jcmbrateoper.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Multiply", "Devide" }));
        jPanel1.add(jcmbrateoper);
        jcmbrateoper.setBounds(210, 140, 100, 22);

        jtxthomecurdsc.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxthomecurdsc.setText("jTextField1");
        jPanel1.add(jtxthomecurdsc);
        jtxthomecurdsc.setBounds(330, 20, 340, 20);

        jtxtratetypedsc.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxtratetypedsc.setText("jTextField1");
        jPanel1.add(jtxtratetypedsc);
        jtxtratetypedsc.setBounds(330, 50, 340, 20);

        jlblratesrce1.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jlblratesrce1.setText("Source Of Rate");
        jPanel1.add(jlblratesrce1);
        jlblratesrce1.setBounds(20, 170, 140, 14);

        HorizontalLine1.setForeground(new java.awt.Color(102, 102, 102));
        HorizontalLine1.setAlignmentX(0.0F);
        HorizontalLine1.setAlignmentY(0.0F);
        jPanel1.add(HorizontalLine1);
        HorizontalLine1.setBounds(20, 200, 650, 10);

        jtxtCurrencyRate.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxtCurrencyRate.setText("jTextField1");
        jPanel1.add(jtxtCurrencyRate);
        jtxtCurrencyRate.setBounds(210, 210, 80, 20);

        jbtnBrowseBank1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jbtnBrowseBank1.setText("...");
        jbtnBrowseBank1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBrowseBank1ActionPerformed(evt);
            }
        });
        jPanel1.add(jbtnBrowseBank1);
        jbtnBrowseBank1.setBounds(290, 210, 30, 17);

        jtxtCurrencyRateDsc.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtxtCurrencyRateDsc.setText("jTextField2");
        jPanel1.add(jtxtCurrencyRateDsc);
        jtxtCurrencyRateDsc.setBounds(330, 210, 340, 20);

        jbtnBrowseBank2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jbtnBrowseBank2.setText("...");
        jbtnBrowseBank2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBrowseBank2ActionPerformed(evt);
            }
        });
        jPanel1.add(jbtnBrowseBank2);
        jbtnBrowseBank2.setBounds(290, 50, 30, 17);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(60, 80, 680, 240);

        jtblDetail.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtblDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Rate Date", "Rate", "Spread"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblDetail.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jtblDetailMouseWheelMoved(evt);
            }
        });
        jtblDetail.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jtblDetailPropertyChange(evt);
            }
        });
        jtblDetail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtblDetailKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jtblDetail);
        jtblDetail.getColumnModel().getColumn(0).setMinWidth(0);
        jtblDetail.getColumnModel().getColumn(0).setPreferredWidth(0);
        jtblDetail.getColumnModel().getColumn(0).setMaxWidth(0);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(60, 330, 680, 130);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
         try {
            moveFirst();

         } catch (CodeException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formInternalFrameOpened

private void kdatePurchaseDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kdatePurchaseDateFocusLost

}//GEN-LAST:event_kdatePurchaseDateFocusLost

private void kdatePurchaseDateCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_kdatePurchaseDateCaretPositionChanged

}//GEN-LAST:event_kdatePurchaseDateCaretPositionChanged

private void kdatePurchaseDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_kdatePurchaseDatePropertyChange

}//GEN-LAST:event_kdatePurchaseDatePropertyChange

private void jbtnBrowseBank1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBrowseBank1ActionPerformed

    try {

              Gl_currencys brs = new Gl_currencys();
              FrmBrowse bd = new FrmBrowse(brs);
              bd.setFirstValue(jtxtCurrencyRate);
              bd.setSecondValue(jtxtCurrencyRateDsc);
              bd.setModal(true);
              bd.setVisible(true);

              obj.filterbysourcecur(jtxtCurrencyRate.getText());
              cbhds=obj.getCbhds();
              showDataDetail();

      } catch (CodeException ex) {
          ex.printStackTrace();
      }

}//GEN-LAST:event_jbtnBrowseBank1ActionPerformed

private void jbtnBrowseBank2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBrowseBank2ActionPerformed
    // TODO add your handling code here:
    try {
	      Gl_ratetypes brs = new Gl_ratetypes();
	      FrmBrowse bd = new FrmBrowse(brs);
	      bd.setFirstValue(jtxtratetype);
              bd.setSecondValue(jtxtratetypedsc);
	      bd.setModal(true);
	      bd.setVisible(true);

	  } catch (CodeException ex) {
	      ex.printStackTrace();
	  }
}//GEN-LAST:event_jbtnBrowseBank2ActionPerformed

private void cekCbhd() throws CodeException {

    int row = jtblDetail.getSelectedRow();
    int col = jtblDetail.getSelectedColumn();


    Gl_currencyrated cbhd;
    if (row > cbhds.size() - 1) {
        cbhd = new Gl_currencyrated();
        cbhds.add(cbhd);
    }else{
        cbhd = (Gl_currencyrated) cbhds.list().get(row);
    }

    long idcbhd = 0 ;
    try{
        idcbhd = Long.parseLong(tmodeldetail.getValueAt(row, 0)+"");
    }catch (Exception e){}

    cbhd.setID(idcbhd);
    cbhd.setsourcecur(jtxtCurrencyRate.getText());
    cbhd.setratedate(GlobalUtils.churuf(tmodeldetail.getValueAt(row, 1)));
    cbhd.setrate(GlobalUtils.toDbl(GlobalUtils.churuf(tmodeldetail.getValueAt(row, 2))));
    cbhd.setspread(GlobalUtils.toDbl(GlobalUtils.churuf(tmodeldetail.getValueAt(row, 3))));

    cbhds.list().set(row, cbhd);

}

private void jtblDetailPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jtblDetailPropertyChange
    // TODO add your handling code here:
    int row = jtblDetail.getSelectedRow();
    int col = jtblDetail.getSelectedColumn();


    try{
        //if(posttable != row) {

        if (row > -1) {

            cekCbhd();

        }
        posttable = row;


        //}
    }catch (Exception e){
        e.printStackTrace();
    }

}//GEN-LAST:event_jtblDetailPropertyChange

private void jtblDetailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtblDetailKeyPressed
    // TODO add your handling code here:
    int row = jtblDetail.getSelectedRow();
    int col = jtblDetail.getSelectedColumn();

    if (evt.getKeyCode() == KeyEvent.VK_INSERT) {
        tmodeldetail.addRow(datadetail);
        tmodeldetail.setValueAt("0", tmodeldetail.getRowCount() - 1, 0);
        tmodeldetail.setValueAt(GlobalUtils.formatDate(GlobalUtils.getCurrentDate(),"yyyy-MM-dd"), tmodeldetail.getRowCount() - 1, 1);
        tmodeldetail.setValueAt(0, tmodeldetail.getRowCount() - 1, 2);
        tmodeldetail.setValueAt(0, tmodeldetail.getRowCount() - 1, 3);
        

        GlobalUtils.selectCellTable(jtblDetail, tmodeldetail.getRowCount() - 1, 1);

    }
    if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
    try{
        if (row<cbhds.size()){
            int iquestion = JOptionPane.showConfirmDialog(null, "Anda Ingin Menghapus Baris Ke " + (row+1) +" of "+ obj.getCbhds().size(), "Hapus ", JOptionPane.YES_NO_OPTION);
            if ( iquestion == JOptionPane.YES_OPTION) {

                obj.removeCbhd(row);


                if (obj.getID()>0){
                    saveData();
                } else {
                    tmodeldetail.removeRow(row);
                }

                if (row+1 < tmodeldetail.getRowCount()) {
                    GlobalUtils.selectCellTable(jtblDetail, row, 1);
                }else{
                    GlobalUtils.selectCellTable(jtblDetail, tmodeldetail.getRowCount()-1, 1);
                }
                showDataDetail();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selected row is not exist in data, Delete Cancel");
        }
    }catch(Exception e){e.printStackTrace();}
    }



}//GEN-LAST:event_jtblDetailKeyPressed

private void jtblDetailMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jtblDetailMouseWheelMoved
    // TODO add your handling code here:
}//GEN-LAST:event_jtblDetailMouseWheelMoved


private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {                                            
    setToolBar(iformtype,istatus);
    mf.setIcon(CLASSNAME);
}                                           

private void jbtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {       
      try {
              if (obj.getID()>0){
                  Gl_currencyratehs brs = new Gl_currencyratehs();
                  FrmBrowse bd = new FrmBrowse(this, brs);
                  bd.setFirstValue(jtxthomecur);
                  bd.setModal(true);
                  bd.setVisible(true);
                  
                 
              } else {
                  Gl_currencys brs = new Gl_currencys();
                  FrmBrowse bd = new FrmBrowse(brs);
                  bd.setFirstValue(jtxthomecur);
                  bd.setSecondValue(jtxthomecurdsc);
                  bd.setModal(true);
                  bd.setVisible(true);
              }
	      
	  } catch (CodeException ex) {
	      ex.printStackTrace();
	  }
}                                                                                 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmGl_currencyrateh().setVisible(true);
                } catch (CodeException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator HorizontalLine;
    private javax.swing.JSeparator HorizontalLine1;
    private javax.swing.JLabel jHeader;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton jbtnBrowse;
    private javax.swing.JButton jbtnBrowseBank1;
    private javax.swing.JButton jbtnBrowseBank2;
    private javax.swing.JComboBox jcmbdatematch;
    private javax.swing.JComboBox jcmbrateoper;
    private javax.swing.JLabel jlbldatematch;
    private javax.swing.JLabel jlbldscription;
    private javax.swing.JLabel jlblhomecur;
    private javax.swing.JLabel jlblrateoper;
    private javax.swing.JLabel jlblratesrce;
    private javax.swing.JLabel jlblratesrce1;
    private javax.swing.JLabel jlblratetype;
    private javax.swing.JTable jtblDetail;
    private javax.swing.JTextField jtxtCurrencyRate;
    private javax.swing.JTextField jtxtCurrencyRateDsc;
    private javax.swing.JTextField jtxtauditdate;
    private javax.swing.JTextField jtxtaudituser;
    private javax.swing.JTextField jtxtcmpnyid;
    private javax.swing.JTextField jtxtdscription;
    private javax.swing.JTextField jtxtentrydate;
    private javax.swing.JTextField jtxthomecur;
    private javax.swing.JTextField jtxthomecurdsc;
    private javax.swing.JTextField jtxtid;
    private javax.swing.JTextField jtxtobjtype;
    private javax.swing.JTextField jtxtratesrce;
    private javax.swing.JTextField jtxtratetype;
    private javax.swing.JTextField jtxtratetypedsc;
    // End of variables declaration//GEN-END:variables

 
    public void moveFirst() throws CodeException {
        obj.moveFirst();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void movePrevious() throws CodeException {
        obj.movePrevious();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void moveNext() throws CodeException {
        obj.moveNext();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void moveLast() throws CodeException {
        obj.moveLast();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void searchData() throws CodeException {
        obj = new Gl_currencyrateh(Gl_currencyrateh.PROPERTY_HOMECUR,this.jtxthomecur.getText());
        showData();
        mf.setIcon(CLASSNAME);

    }
    public void newData() throws CodeException {
        obj = new Gl_currencyrateh();
        istatus=1;
        showData();

        jtxtCurrencyRate.setText("");
        jtxtCurrencyRateDsc.setText("");
        
        setToolBar(iformtype,istatus);
    }

    public void saveData() throws CodeException {
        istatus = 0;
        setData();
        obj.save();
        
        showData();
        
        mf.setIcon(CLASSNAME);
    }

    public void showData() throws CodeException {
        setCursor(GlobalUtils.HOURGLASSCURSOR);
	
             jtxtid.setText(obj.toString(Gl_currencyrateh.PROPERTY_ID));
             jtxthomecur.setText(obj.toString(Gl_currencyrateh.PROPERTY_HOMECUR));
             Gl_currency glcur=new Gl_currency(jtxthomecur.getText());
             jtxthomecurdsc.setText(glcur.getcurncdesc());

             jtxtratetype.setText(obj.toString(Gl_currencyrateh.PROPERTY_RATETYPE));
             Gl_ratetype glratetype=new Gl_ratetype(Gl_ratetype.PROPERTY_RATETYPE, jtxtratetype.getText());
             jtxtratetypedsc.setText(glratetype.getdscription());

             jtxtdscription.setText(obj.toString(Gl_currencyrateh.PROPERTY_DSCRIPTION));
//             jtxtdatematch.setText(obj.toString(Gl_currencyrateh.PROPERTY_DATEMATCH));
//             jtxtrateoper.setText(obj.toString(Gl_currencyrateh.PROPERTY_RATEOPER));
             jtxtratesrce.setText(obj.toString(Gl_currencyrateh.PROPERTY_RATESRCE));
             jtxtentrydate.setText(obj.toString(Gl_currencyrateh.PROPERTY_ENTRYDATE));
             jtxtauditdate.setText(obj.toString(Gl_currencyrateh.PROPERTY_AUDITDATE));
             jtxtaudituser.setText(obj.toString(Gl_currencyrateh.PROPERTY_AUDITUSER));
             jtxtobjtype.setText(obj.toString(Gl_currencyrateh.PROPERTY_OBJTYPE));
             jtxtcmpnyid.setText(obj.toString(Gl_currencyrateh.PROPERTY_CMPNYID));


             cbhds=obj.getCbhds();

             showDataDetail();

        setCursor(GlobalUtils.NORMALCURSOR);
    }

    private Boolean isexist(String tgl){
        int i=0;
        for (i=0;i<tmodeldetail.getRowCount();i++){
            if (GlobalUtils.churuf(tmodeldetail.getValueAt(i, 1)).equalsIgnoreCase(tgl)){
                return true;
            }
        }
        return false;
    }
    private void showDataDetail() throws CodeException{
        GlobalModel.clearRow(tmodeldetail);

        tmodeldetail.addRow(datadetail);
        tmodeldetail.setValueAt("0", tmodeldetail.getRowCount() - 1, 0);
        tmodeldetail.setValueAt(GlobalUtils.formatDate(GlobalUtils.getCurrentDate(),"yyyy-MM-dd"), tmodeldetail.getRowCount() - 1, 1);
        tmodeldetail.setValueAt(0, tmodeldetail.getRowCount() - 1, 2);
        tmodeldetail.setValueAt(0, tmodeldetail.getRowCount() - 1, 3);
        GlobalUtils.selectCellTable(jtblDetail, 0, 1);
        for (Object o:obj.getCbhds().list()){
            Gl_currencyrated glcurated=(Gl_currencyrated) o;

            jtxtCurrencyRate.setText(glcurated.getsourcecur());
            Gl_currency glcur=new Gl_currency(glcurated.getsourcecur());
            jtxtCurrencyRateDsc.setText(glcur.getcurncdesc());

            tmodeldetail.setValueAt(glcurated.getID(), tmodeldetail.getRowCount()-1, 0);
            tmodeldetail.setValueAt(GlobalUtils.formatDate(glcurated.getratedate(),"yyyy-MM-dd"), tmodeldetail.getRowCount()-1, 1);
            tmodeldetail.setValueAt(glcurated.getrate(), tmodeldetail.getRowCount()-1, 2);
            tmodeldetail.setValueAt(glcurated.getspread(), tmodeldetail.getRowCount()-1, 3);

            
            tmodeldetail.addRow(datadetail);
            tmodeldetail.setValueAt(GlobalUtils.formatDate(GlobalUtils.getCurrentDate(),"yyyy-MM-dd"), tmodeldetail.getRowCount() - 1, 1);
            tmodeldetail.setValueAt(0, tmodeldetail.getRowCount() - 1, 2);
            tmodeldetail.setValueAt(0, tmodeldetail.getRowCount() - 1, 3);

        }

    }
    public void delete() throws CodeException {
        obj.delete();
        obj.moveFirst();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void setToolBar(int iFormType, int istatus) {
        mf.setToolBar(iformtype,istatus);        
    }

    public void setData() throws CodeException {
        
	
          obj.fromString(Gl_currencyrateh.PROPERTY_ID, jtxtid.getText()) ;
          obj.fromString(Gl_currencyrateh.PROPERTY_HOMECUR, jtxthomecur.getText()) ;
          obj.fromString(Gl_currencyrateh.PROPERTY_RATETYPE, jtxtratetype.getText()) ;
          obj.fromString(Gl_currencyrateh.PROPERTY_DSCRIPTION, jtxtdscription.getText()) ;
          obj.fromString(Gl_currencyrateh.PROPERTY_DATEMATCH, GlobalUtils.churuf(jcmbdatematch.getSelectedIndex()+1)) ;
          obj.fromString(Gl_currencyrateh.PROPERTY_RATEOPER, GlobalUtils.churuf(jcmbrateoper.getSelectedIndex()+1)) ;
          obj.fromString(Gl_currencyrateh.PROPERTY_RATESRCE, jtxtratesrce.getText()) ;
          obj.fromString(Gl_currencyrateh.PROPERTY_ENTRYDATE, jtxtentrydate.getText()) ;
          obj.fromString(Gl_currencyrateh.PROPERTY_AUDITDATE, jtxtauditdate.getText()) ;
          obj.fromString(Gl_currencyrateh.PROPERTY_AUDITUSER, jtxtaudituser.getText()) ;
          obj.fromString(Gl_currencyrateh.PROPERTY_OBJTYPE, jtxtobjtype.getText()) ;
          obj.fromString(Gl_currencyrateh.PROPERTY_CMPNYID, jtxtcmpnyid.getText()) ;


    }

    public void undo() throws CodeException {
        istatus = 0;
        moveFirst();
        showData();
    }

    public void execute() throws CodeException {
       saveData();
    }

    public void printData() throws CodeException {
        Map parameter = new HashMap();
        NavigatorObjectInt noi = (NavigatorObjectInt) obj;        
        String file   = GlobalUtils.getCurrentDir() +"/Reports/" + noi.getClassName() + ".jrxml";
        GlobalUtils.printReport(file,  false);    
    }

    public void importCsv() throws CodeException {
            
        String file1 = "";
        String file2 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".csv";   
        
        JFileChooser chooser = new JFileChooser(".");
        chooser.setDialogTitle("Pilih File ");
        FileFilter filter1 = new ExtFileChooserFilter("CSV", new String[] { "CSV"});
        chooser.setFileFilter(filter1);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            
            try {
                file1 = selectedFile.getCanonicalPath();
            
            }catch (Exception e) {}

            GlobalUtils.copyfile(file1, file2 );                

            obj.importCsv();
            
        }else {
          JOptionPane.showMessageDialog(null,"No Selection ");
        }

    }

    public void exportCsv() throws CodeException {
        
    
        if (obj.exportCsv()) {
            
            String file1 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".csv";   
            String file2 = "";
            
            JFileChooser chooser = new JFileChooser(".");
            chooser.setDialogTitle("Pilih Directory ");
    
            if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                try {
                    file2 = chooser.getSelectedFile().getCanonicalPath() + ".csv";
                        
                    JOptionPane.showMessageDialog(null, GlobalUtils.copyfile(file1, file2 ));                    
                    
                }catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());                    
                }
                
            }else {
              JOptionPane.showMessageDialog(null,"No Selection ");
            }
    
        }
        
    }

    public void importText() throws CodeException {
        String file1 = "";
        String file2 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".txt";   
        
        JFileChooser chooser = new JFileChooser(".");
        chooser.setDialogTitle("Pilih File ");
        FileFilter filter1 = new ExtFileChooserFilter("txt", new String[] { "txt"});
        chooser.setFileFilter(filter1);


        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            
            try {
                file1 = selectedFile.getCanonicalPath();
            
            }catch (Exception e) {}

            GlobalUtils.copyfile(file1, file2 );                

            obj.importCsv();
            
        }else {
          JOptionPane.showMessageDialog(null,"No Selection ");
        }
    }

    public void exportText() throws CodeException {
        if (obj.exportText()) {
            
            String file1 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".txt";   
            String file2 = "";
            
            JFileChooser chooser = new JFileChooser(".");
            chooser.setDialogTitle("Pilih Directory ");
    
            if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                try {
                    file2 = chooser.getSelectedFile().getCanonicalPath() + ".txt";                        
                    JOptionPane.showMessageDialog(null, GlobalUtils.copyfile(file1, file2 ));                    
                    
                }catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());                    
                }
                
            }else {
              JOptionPane.showMessageDialog(null,"No Selection ");
            }
    
        } 
    }

    
}
