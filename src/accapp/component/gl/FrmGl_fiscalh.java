/*
 * From Template
 *
 * Created on June 29, 2007, 2:00 PM
 * 
 * 
 * How to Call this Form on FrmMainFrame
 * Sample : 
 *    
 * import test.FrmGl_fiscalh;
 * 
 * .......
 * 
 * 
 * FrmGl_fiscalh frmGl_fiscalh;
 * 
 * .......
 * 
 try {
        if (frmGl_fiscalh == null) {
            frmmGl_fiscalh = new FrmGl_fiscalh(this);
        }
        
        showForm(frmGl_fiscalh);
        
    }catch(Exception e) {
        e.printStackTrace();
    }
 * 
 */

package accapp.component.gl;

import accapp.objectclasses.gl.Gl_fiscald;
import accapp.objectclasses.gl.Gl_fiscalds;
import common.component.FrmBrowse;
import common.classinterface.NavigatorFormInt;
import common.classinterface.NavigatorObjectInt;
import common.component.FrmMainFrame;

import common.utils.CodeException;
import common.utils.GlobalUtils;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import common.utils.ExtFileChooserFilter;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import accapp.objectclasses.gl.Gl_fiscalh;
import accapp.objectclasses.gl.Gl_fiscalhs;
import common.tablemodels.GlobalModel;
import java.awt.event.KeyEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author  Generator
 */

public class FrmGl_fiscalh extends javax.swing.JInternalFrame implements NavigatorFormInt {

    private static int istatus = 0;
    private static int iformtype = 0;
    public static String CLASSNAME="FrmGl_fiscalh";
    
    FrmMainFrame mf ;
    Object[] datadetail;
    DefaultTableModel tmodeldetail;
    
    public Gl_fiscalh obj = new Gl_fiscalh();
    Gl_fiscalds cbhds=new Gl_fiscalds();

    int posttable = 0;
    
   
    /** Creates new form Area */
    public FrmGl_fiscalh() throws CodeException {
        initComponents();
    }
    
    public FrmGl_fiscalh(FrmMainFrame mf) throws CodeException{
        this.mf = mf;
        initComponents();

        datadetail = new Object[jtblDetail.getRowCount()];
        tmodeldetail = (DefaultTableModel) jtblDetail.getModel();

        jtxtid.setBounds(180, 30, 80, 20);
        jtxtentrydate.setBounds(260, 30, 160, 20);
        jtxtauditdate.setBounds(420, 30, 140, 20);
        jtxtaudituser.setBounds(560, 30, 110, 20);
        jtxtcmpnyid.setBounds(670, 30, 120, 20);

        jtxtid.setEditable(false);
        jtxtentrydate.setEditable(false);
        jtxtauditdate.setEditable(false);
        jtxtaudituser.setEditable(false);
        jtxtcmpnyid.setEditable(false);
    }
     
       
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jHeader = new javax.swing.JLabel();
        HorizontalLine = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jbtnBrowse = new javax.swing.JButton();
        jtxtid = new javax.swing.JTextField();
        jlblyop = new javax.swing.JLabel();
        jtxtyop = new javax.swing.JTextField();
        jtxtentrydate = new javax.swing.JTextField();
        jtxtauditdate = new javax.swing.JTextField();
        jtxtaudituser = new javax.swing.JTextField();
        jtxtcmpnyid = new javax.swing.JTextField();
        jchckactive = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblDetail = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gl_fiscalh");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jHeader.setBackground(new java.awt.Color(102, 102, 102));
        jHeader.setFont(new java.awt.Font("Dialog", 1, 10));
        jHeader.setForeground(new java.awt.Color(255, 255, 255));
        jHeader.setText(" : : Gl_fiscalh");
        jHeader.setAlignmentY(0.0F);
        jHeader.setOpaque(true);
        getContentPane().add(jHeader);
        jHeader.setBounds(30, 30, 130, 20);

        HorizontalLine.setForeground(new java.awt.Color(102, 102, 102));
        HorizontalLine.setAlignmentX(0.0F);
        HorizontalLine.setAlignmentY(0.0F);
        getContentPane().add(HorizontalLine);
        HorizontalLine.setBounds(160, 50, 650, 2);

        jSeparator3.setForeground(new java.awt.Color(102, 102, 102));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setAlignmentX(0.0F);
        jSeparator3.setAlignmentY(0.0F);
        getContentPane().add(jSeparator3);
        jSeparator3.setBounds(30, 50, 2, 400);

        jbtnBrowse.setFont(new java.awt.Font("Dialog", 0, 10));
        jbtnBrowse.setText("...");
        jbtnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBrowseActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnBrowse);
        jbtnBrowse.setBounds(340, 100, 30, 17);

        jtxtid.setFont(new java.awt.Font("Dialog", 0, 8));
        jtxtid.setText("id");
        getContentPane().add(jtxtid);
        jtxtid.setBounds(340, 30, 80, 16);

        jlblyop.setFont(new java.awt.Font("Dialog", 1, 10));
        jlblyop.setText("Fiscal Year");
        getContentPane().add(jlblyop);
        jlblyop.setBounds(70, 100, 140, 14);

        jtxtyop.setFont(new java.awt.Font("Dialog", 0, 10));
        jtxtyop.setText("yop");
        getContentPane().add(jtxtyop);
        jtxtyop.setBounds(260, 100, 80, 20);

        jtxtentrydate.setFont(new java.awt.Font("Dialog", 0, 8));
        jtxtentrydate.setText("entrydate");
        getContentPane().add(jtxtentrydate);
        jtxtentrydate.setBounds(420, 30, 80, 16);

        jtxtauditdate.setFont(new java.awt.Font("Dialog", 0, 8));
        jtxtauditdate.setText("auditdate");
        getContentPane().add(jtxtauditdate);
        jtxtauditdate.setBounds(500, 30, 80, 16);

        jtxtaudituser.setFont(new java.awt.Font("Dialog", 0, 8));
        jtxtaudituser.setText("audituser");
        getContentPane().add(jtxtaudituser);
        jtxtaudituser.setBounds(580, 30, 80, 16);

        jtxtcmpnyid.setFont(new java.awt.Font("Dialog", 0, 8));
        jtxtcmpnyid.setText("cmpnyid");
        getContentPane().add(jtxtcmpnyid);
        jtxtcmpnyid.setBounds(660, 30, 80, 16);

        jchckactive.setFont(new java.awt.Font("Dialog", 1, 10));
        jchckactive.setText("Active");
        getContentPane().add(jchckactive);
        jchckactive.setBounds(70, 120, 100, 23);

        jtblDetail.setFont(new java.awt.Font("Dialog", 0, 10));
        jtblDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "id", "Fiscal Periode", "Start", "End", "Status", "Recalculate"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblDetailMouseClicked(evt);
            }
        });
        jtblDetail.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jtblDetailPropertyChange(evt);
            }
        });
        jtblDetail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtblDetailKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jtblDetail);
        jtblDetail.getColumnModel().getColumn(0).setMinWidth(0);
        jtblDetail.getColumnModel().getColumn(0).setPreferredWidth(0);
        jtblDetail.getColumnModel().getColumn(0).setMaxWidth(0);
        jtblDetail.getColumnModel().getColumn(5).setMaxWidth(100);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(70, 150, 670, 280);

        jButton1.setFont(new java.awt.Font("Dialog", 0, 10));
        jButton1.setText("Generate Periode");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(568, 120, 170, 23);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
         try {
            moveFirst();

         } catch (CodeException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formInternalFrameOpened

private void kdatePurchaseDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kdatePurchaseDateFocusLost

}//GEN-LAST:event_kdatePurchaseDateFocusLost

private void kdatePurchaseDateCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_kdatePurchaseDateCaretPositionChanged

}//GEN-LAST:event_kdatePurchaseDateCaretPositionChanged

private void kdatePurchaseDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_kdatePurchaseDatePropertyChange

}//GEN-LAST:event_kdatePurchaseDatePropertyChange

private void jbtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBrowseActionPerformed
    // TODO add your handling code here:
    try {
      Gl_fiscalhs brs = new Gl_fiscalhs();
      FrmBrowse bd = new FrmBrowse(this, brs);
      bd.setFirstValue(jtxtyop);
      bd.setModal(true);
      bd.setVisible(true);

  } catch (CodeException ex) {
      ex.printStackTrace();
  }
}//GEN-LAST:event_jbtnBrowseActionPerformed

private void jtblDetailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtblDetailKeyPressed
    // TODO add your handling code here:
    int row = jtblDetail.getSelectedRow();
    int col = jtblDetail.getSelectedColumn();

    if (evt.getKeyCode() == KeyEvent.VK_INSERT) {
        tmodeldetail.addRow(datadetail);
        tmodeldetail.setValueAt("0", tmodeldetail.getRowCount() - 1, 0);
        tmodeldetail.setValueAt(tmodeldetail.getRowCount(), tmodeldetail.getRowCount() - 1, 1);
        tmodeldetail.setValueAt("", tmodeldetail.getRowCount() - 1, 2);
        tmodeldetail.setValueAt("", tmodeldetail.getRowCount() - 1, 3);
        tmodeldetail.setValueAt("Unlocked", tmodeldetail.getRowCount() - 1, 4);


        GlobalUtils.selectCellTable(jtblDetail, tmodeldetail.getRowCount() - 1, 1);

    }
    if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
    try{
        int iquestion = JOptionPane.showConfirmDialog(null, "Anda Ingin Menghapus Baris Ke " + (row+1) +" of "+ obj.getDetail().size(), "Hapus ", JOptionPane.YES_NO_OPTION);
        if ( iquestion == JOptionPane.YES_OPTION) {

            obj.removeDetail(row);


            if (obj.getID()>0){
                saveData();
            } else {
                tmodeldetail.removeRow(row);
            }

            if (row+1 < tmodeldetail.getRowCount()) {
                GlobalUtils.selectCellTable(jtblDetail, row, 1);
            }else{
                GlobalUtils.selectCellTable(jtblDetail, tmodeldetail.getRowCount()-1, 1);
            }
            showDataDetail();
        }
    }catch(Exception e){e.printStackTrace();}
    }
}//GEN-LAST:event_jtblDetailKeyPressed

private void cekCbhd() throws CodeException {

    int row = jtblDetail.getSelectedRow();
    int col = jtblDetail.getSelectedColumn();


    Gl_fiscald cbhd;
    if (row > cbhds.size() - 1) {
        cbhd = new Gl_fiscald();
        cbhds.add(cbhd);
    }else{
        cbhd = (Gl_fiscald) cbhds.list().get(row);
    }

    long idcbhd = 0 ;
    try{
        idcbhd = Long.parseLong(tmodeldetail.getValueAt(row, 0)+"");
    }catch (Exception e){}

    cbhd.setID(idcbhd);
    cbhd.setmop(GlobalUtils.toInt(GlobalUtils.churuf(tmodeldetail.getValueAt(row, 1))));
    cbhd.setbgndate(GlobalUtils.formatDate(GlobalUtils.churuf(tmodeldetail.getValueAt(row, 2)),"yyyy-MM-dd"));
    cbhd.setenddate(GlobalUtils.formatDate(GlobalUtils.churuf(tmodeldetail.getValueAt(row, 3)),"yyyy-MM-dd"));

    if (GlobalUtils.churuf(tmodeldetail.getValueAt(row,4)).equalsIgnoreCase("unlocked")){
        cbhd.setmopsts(1);
    } else {
        cbhd.setmopsts(0);
    }

    if (Boolean.parseBoolean(GlobalUtils.churuf(tmodeldetail.getValueAt(row,5)))){
        cbhd.setrecalsts(0);
    } else {
        cbhd.setrecalsts(1);
    }

    cbhds.list().set(row, cbhd);

}

private void jtblDetailPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jtblDetailPropertyChange
    // TODO add your handling code here:
        // TODO add your handling code here:
    int row = jtblDetail.getSelectedRow();
    int col = jtblDetail.getSelectedColumn();


    try{
        //if(posttable != row) {

        if (col==2){
           // tmodeldetail.setValueAt(GlobalUtils.getlastdateofmonth(GlobalUtils.churuf(tmodeldetail.getValueAt(row, 2))), row, 3);
        }
        if (row > -1) {

            cekCbhd();

        }
        posttable = row;


        //}
    }catch (Exception e){
        e.printStackTrace();
    }
}//GEN-LAST:event_jtblDetailPropertyChange

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    // TODO add your handling code here:

    int i=0;
        try {
            if (obj.getDetail().size() > 0) {
                JOptionPane.showMessageDialog(this, "Cannot generate while data exists");
            } else {
                GlobalModel.clearRow(tmodeldetail);
                for (i = 0; i < 12; i++) {
                    tmodeldetail.addRow(datadetail);
                    tmodeldetail.setValueAt(0, tmodeldetail.getRowCount() - 1, 0);
                    tmodeldetail.setValueAt(tmodeldetail.getRowCount(), tmodeldetail.getRowCount() - 1, 1);
                    String bgndate = tmodeldetail.getRowCount() + "/01/" + jtxtyop.getText();
                    tmodeldetail.setValueAt(bgndate, tmodeldetail.getRowCount() - 1, 2);
                    tmodeldetail.setValueAt(GlobalUtils.getlastdateofmonth(bgndate), tmodeldetail.getRowCount() - 1, 3);
                    tmodeldetail.setValueAt("Unlocked", tmodeldetail.getRowCount() - 1, 4);
                    GlobalUtils.selectCellTable(jtblDetail, tmodeldetail.getRowCount() - 1, 1);
                    cekCbhd();
                }
            }
        } catch (CodeException ex) {
            Logger.getLogger(FrmGl_fiscalh.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_jButton1ActionPerformed

private void jtblDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblDetailMouseClicked
    // TODO add your handling code here:
    int row=jtblDetail.getSelectedRow();
    int col=jtblDetail.getSelectedColumn();

    if (col==4){
        if (evt.getClickCount()==2){
            String status=GlobalUtils.churuf(jtblDetail.getValueAt(row,4));
            if (status.equalsIgnoreCase("Unlocked")){
                jtblDetail.setValueAt("Locked", row, col);
            } else {
                jtblDetail.setValueAt("Unlocked", row, col);
            }
            try {
                cekCbhd();
            } catch (CodeException ex) {
                Logger.getLogger(FrmGl_fiscalh.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}//GEN-LAST:event_jtblDetailMouseClicked


private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {                                            
    setToolBar(iformtype,istatus);
    mf.setIcon(CLASSNAME);
}                                           


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmGl_fiscalh().setVisible(true);
                } catch (CodeException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator HorizontalLine;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jHeader;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton jbtnBrowse;
    private javax.swing.JCheckBox jchckactive;
    private javax.swing.JLabel jlblyop;
    private javax.swing.JTable jtblDetail;
    private javax.swing.JTextField jtxtauditdate;
    private javax.swing.JTextField jtxtaudituser;
    private javax.swing.JTextField jtxtcmpnyid;
    private javax.swing.JTextField jtxtentrydate;
    private javax.swing.JTextField jtxtid;
    private javax.swing.JTextField jtxtyop;
    // End of variables declaration//GEN-END:variables

 
    public void moveFirst() throws CodeException {
        obj.moveFirst();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void movePrevious() throws CodeException {
        obj.movePrevious();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void moveNext() throws CodeException {
        obj.moveNext();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void moveLast() throws CodeException {
        obj.moveLast();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void searchData() throws CodeException {
        obj = new Gl_fiscalh(Gl_fiscalh.PROPERTY_YOP,jtxtyop.getText());
        showData();
        mf.setIcon(CLASSNAME);

    }
    public void newData() throws CodeException {
        obj = new Gl_fiscalh();
        istatus=1;
        showData();
        jtxtyop.setText(GlobalUtils.churuf(obj.getNextFiscalYear()));
        setToolBar(iformtype,istatus);
    }

    public void saveData() throws CodeException {
        istatus = 0;
        setData();
        obj.save();
        
        showData();
        
        mf.setIcon(CLASSNAME);
    }

    public void showData() throws CodeException {
        setCursor(GlobalUtils.HOURGLASSCURSOR);
	
             jtxtid.setText(obj.toString(Gl_fiscalh.PROPERTY_ID));
             jtxtyop.setText(obj.toString(Gl_fiscalh.PROPERTY_YOP));
             if (obj.getactive()==1){
                jchckactive.setSelected(true);
             } else {
                jchckactive.setSelected(false);
             }
             jtxtentrydate.setText(obj.toString(Gl_fiscalh.PROPERTY_ENTRYDATE));
             jtxtauditdate.setText(obj.toString(Gl_fiscalh.PROPERTY_AUDITDATE));
             jtxtaudituser.setText(obj.toString(Gl_fiscalh.PROPERTY_AUDITUSER));
             jtxtcmpnyid.setText(obj.toString(Gl_fiscalh.PROPERTY_CMPNYID));

             cbhds=obj.getDetail();

             if (obj.getDetail().size()>0){
                 jButton1.setEnabled(false);
             } else {
                 jButton1.setEnabled(true);
             }

             showDataDetail();

        setCursor(GlobalUtils.NORMALCURSOR);
    }

    private void showDataDetail() throws CodeException{
        GlobalModel.clearRow(tmodeldetail);

        
        for (Object o:obj.getDetail().list()){
            Gl_fiscald glfiscald=(Gl_fiscald) o;

            tmodeldetail.addRow(datadetail);
            tmodeldetail.setValueAt(glfiscald.getID() , tmodeldetail.getRowCount() - 1, 0);
            tmodeldetail.setValueAt(glfiscald.getmop() , tmodeldetail.getRowCount() - 1, 1);
            tmodeldetail.setValueAt(GlobalUtils.formatDate(glfiscald.getbgndate(),"MM/dd/yyyy"), tmodeldetail.getRowCount() - 1, 2);
            tmodeldetail.setValueAt(GlobalUtils.formatDate(glfiscald.getenddate(),"MM/dd/yyyy"), tmodeldetail.getRowCount() - 1, 3);
            tmodeldetail.setValueAt(glfiscald.getmopstsdsc(), tmodeldetail.getRowCount() - 1, 4);
            if (glfiscald.getrecalsts()==0){
                tmodeldetail.setValueAt(true, tmodeldetail.getRowCount() - 1, 5);
            } else {
                tmodeldetail.setValueAt(false, tmodeldetail.getRowCount() - 1, 5);
            }


        }

    }

    public void delete() throws CodeException {
        obj.delete();
        obj.moveFirst();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void setToolBar(int iFormType, int istatus) {
        mf.setToolBar(iformtype,istatus);        
    }

    public void setData() throws CodeException {
        
	
          obj.fromString(Gl_fiscalh.PROPERTY_ID, jtxtid.getText()) ;
          obj.fromString(Gl_fiscalh.PROPERTY_YOP, jtxtyop.getText()) ;
          if (jchckactive.isSelected()){
            obj.fromString(Gl_fiscalh.PROPERTY_ACTIVE, "1") ;
          } else {
            obj.fromString(Gl_fiscalh.PROPERTY_ACTIVE, "0") ;
          }
          obj.fromString(Gl_fiscalh.PROPERTY_ENTRYDATE, jtxtentrydate.getText()) ;
          obj.fromString(Gl_fiscalh.PROPERTY_AUDITDATE, jtxtauditdate.getText()) ;
          obj.fromString(Gl_fiscalh.PROPERTY_AUDITUSER, jtxtaudituser.getText()) ;
          obj.fromString(Gl_fiscalh.PROPERTY_CMPNYID, jtxtcmpnyid.getText()) ;

    }

    public void undo() throws CodeException {
        istatus = 0;
        moveFirst();
        showData();
    }

    public void execute() throws CodeException {
       saveData();
    }

    public void printData() throws CodeException {
        Map parameter = new HashMap();
        NavigatorObjectInt noi = (NavigatorObjectInt) obj;        
        String file   = GlobalUtils.getCurrentDir() +"/Reports/" + noi.getClassName() + ".jrxml";
        GlobalUtils.printReport(file,  false);    
    }

    public void importCsv() throws CodeException {
            
        String file1 = "";
        String file2 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".csv";   
        
        JFileChooser chooser = new JFileChooser(".");
        chooser.setDialogTitle("Pilih File ");
        FileFilter filter1 = new ExtFileChooserFilter("CSV", new String[] { "CSV"});
        chooser.setFileFilter(filter1);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            
            try {
                file1 = selectedFile.getCanonicalPath();
            
            }catch (Exception e) {}

            GlobalUtils.copyfile(file1, file2 );                

            obj.importCsv();
            
        }else {
          JOptionPane.showMessageDialog(null,"No Selection ");
        }

    }

    public void exportCsv() throws CodeException {
        
    
        if (obj.exportCsv()) {
            
            String file1 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".csv";   
            String file2 = "";
            
            JFileChooser chooser = new JFileChooser(".");
            chooser.setDialogTitle("Pilih Directory ");
    
            if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                try {
                    file2 = chooser.getSelectedFile().getCanonicalPath() + ".csv";
                        
                    JOptionPane.showMessageDialog(null, GlobalUtils.copyfile(file1, file2 ));                    
                    
                }catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());                    
                }
                
            }else {
              JOptionPane.showMessageDialog(null,"No Selection ");
            }
    
        }
        
    }

    public void importText() throws CodeException {
        String file1 = "";
        String file2 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".txt";   
        
        JFileChooser chooser = new JFileChooser(".");
        chooser.setDialogTitle("Pilih File ");
        FileFilter filter1 = new ExtFileChooserFilter("txt", new String[] { "txt"});
        chooser.setFileFilter(filter1);


        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            
            try {
                file1 = selectedFile.getCanonicalPath();
            
            }catch (Exception e) {}

            GlobalUtils.copyfile(file1, file2 );                

            obj.importCsv();
            
        }else {
          JOptionPane.showMessageDialog(null,"No Selection ");
        }
    }

    public void exportText() throws CodeException {
        if (obj.exportText()) {
            
            String file1 = GlobalUtils.getCurrentDir() + GlobalUtils.temp + obj.TABLEPROCESS + ".txt";   
            String file2 = "";
            
            JFileChooser chooser = new JFileChooser(".");
            chooser.setDialogTitle("Pilih Directory ");
    
            if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                try {
                    file2 = chooser.getSelectedFile().getCanonicalPath() + ".txt";                        
                    JOptionPane.showMessageDialog(null, GlobalUtils.copyfile(file1, file2 ));                    
                    
                }catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());                    
                }
                
            }else {
              JOptionPane.showMessageDialog(null,"No Selection ");
            }
    
        } 
    }

    
}
